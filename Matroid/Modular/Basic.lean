import Matroid.Flat.Lattice
import Matroid.Simple
import Matroid.ForMathlib.Card
import Matroid.ForMathlib.Matroid.Basic
import Mathlib.Order.ModularLattice
import Mathlib.Order.Zorn

open Set BigOperators Set.Notation

namespace Matroid

variable {Œ± : Type*} {Œπ : Sort*} {Œ∑ : Type*} {A : Set Œ∑} {M : Matroid Œ±} {B I J X X' Y Y' F : Set Œ±}
    {e : Œ±} {i j : Œπ} {Xs Ys Is Js : Œπ ‚Üí Set Œ±}

section IsMutualBasis

/-- A base `B` is a mutual base for an indexed set family if it contains a basis for each set
in the family. -/
@[mk_iff]
structure IsMutualBasis (M : Matroid Œ±) (B : Set Œ±) (Xs : Œπ ‚Üí Set Œ±) : Prop where
  indep : M.Indep B
  forall_isBasis : ‚àÄ i, M.IsBasis ((Xs i) ‚à© B) (Xs i)

lemma IsMutualBasis.isBasis_inter (h : M.IsMutualBasis B Xs) (i : Œπ) :
    M.IsBasis ((Xs i) ‚à© B) (Xs i) :=
  h.2 i

lemma IsMutualBasis.subset_closure_inter (h : M.IsMutualBasis B Xs) (i : Œπ) :
    Xs i ‚äÜ M.closure ((Xs i) ‚à© B) :=
  (h.isBasis_inter i).subset_closure

lemma IsMutualBasis.closure_inter_eq (h : M.IsMutualBasis B Xs) (i : Œπ) :
    M.closure (Xs i ‚à© B) = M.closure (Xs i) :=
  (h.isBasis_inter i).closure_eq_closure

@[aesop unsafe 5% (rule_sets := [Matroid])]
lemma IsMutualBasis.subset_ground (h : M.IsMutualBasis B Xs) (i : Œπ) : Xs i ‚äÜ M.E :=
  (h.isBasis_inter i).subset_ground

lemma IsMutualBasis.subtype {Xs : Œ∑ ‚Üí Set Œ±} (h : M.IsMutualBasis B Xs) (A : Set Œ∑) :
    M.IsMutualBasis B (fun i : A ‚Ü¶ Xs i) :=
  ‚ü®h.1, fun ‚ü®i,_‚ü© ‚Ü¶ h.2 i‚ü©

@[simp] lemma isMutualBasis_pair_iff {B X Y : Set Œ±} :
    M.IsMutualBasis B (fun i : ({X,Y} : Set (Set Œ±)) ‚Ü¶ i) ‚Üî
      M.Indep B ‚àß M.IsBasis (X ‚à© B) X ‚àß M.IsBasis (Y ‚à© B) Y := by
  simp [isMutualBasis_iff]

lemma IsMutualBasis.isBasis_iInter [Nonempty Œπ] (h : M.IsMutualBasis B Xs) :
    M.IsBasis ((‚ãÇ i, Xs i) ‚à© B) (‚ãÇ i, Xs i) :=
  h.1.inter_isBasis_iInter (fun _ ‚Ü¶ h.2 _)

lemma IsMutualBasis.isBasis_iUnion (h : M.IsMutualBasis B Xs) :
    M.IsBasis ((‚ãÉ i, Xs i) ‚à© B) (‚ãÉ i, Xs i) := by
  simp_rw [h.1.inter_isBasis_closure_iff_subset_closure_inter, iUnion_subset_iff]
  exact fun i ‚Ü¶ (h.subset_closure_inter i).trans
    (M.closure_subset_closure (inter_subset_inter_left _ (subset_iUnion _ i)))

lemma Indep.isMutualBasis_self (h : M.Indep (‚ãÉ i, Xs i)) :
    M.IsMutualBasis (‚ãÉ i, Xs i) Xs := by
  refine ‚ü®h, fun i ‚Ü¶ ?_‚ü©
  rw [inter_eq_self_of_subset_left (subset_iUnion ..)]
  exact (h.subset (subset_iUnion ..)).isBasis_self

lemma Indep.isMutualBasis_of_forall_subset_closure (hB : M.Indep B)
    (h : ‚àÄ i, Xs i ‚äÜ M.closure ((Xs i) ‚à© B)) : M.IsMutualBasis B Xs := by
  exact ‚ü®hB, fun i ‚Ü¶ hB.inter_isBasis_closure_iff_subset_closure_inter.2 (h i)‚ü©

lemma IsMutualBasis.isBasis_biInter {Xs : Œ∑ ‚Üí Set Œ±} (h : M.IsMutualBasis B Xs) (hA : A.Nonempty) :
    M.IsBasis ((‚ãÇ i ‚àà A, Xs i) ‚à© B) (‚ãÇ i ‚àà A, Xs i) :=
  h.1.inter_isBasis_biInter hA (fun _ _ ‚Ü¶ h.2 _)

@[aesop unsafe 5% (rule_sets := [Matroid])]
lemma IsMutualBasis.iInter_subset_ground [Nonempty Œπ] (h : M.IsMutualBasis B Xs) :
    ‚ãÇ i, Xs i ‚äÜ M.E :=
  h.isBasis_iInter.subset_ground

lemma IsMutualBasis.biInter_subset_ground {Xs : Œ∑ ‚Üí Set Œ±} (h : M.IsMutualBasis B Xs)
    (hA : A.Nonempty) : ‚ãÇ i ‚àà A, Xs i ‚äÜ M.E :=
  (h.isBasis_biInter hA).subset_ground

lemma IsMutualBasis.isBasis_biUnion {Xs : Œ∑ ‚Üí Set Œ±} (h : M.IsMutualBasis B Xs) (A : Set Œ∑) :
    M.IsBasis ((‚ãÉ i ‚àà A, Xs i) ‚à© B) (‚ãÉ i ‚àà A, Xs i) := by
  convert (h.subtype A).isBasis_iUnion <;> simp

lemma IsMutualBasis.isMutualBasis_of_forall_subset_subset_closure (hB : M.IsMutualBasis B Xs)
    (hXY : ‚àÄ i, Xs i ‚äÜ Ys i) (hYX : ‚àÄ i, Ys i ‚äÜ M.closure (Xs i)) : M.IsMutualBasis B Ys := by
  refine ‚ü®hB.indep, fun i ‚Ü¶ hB.indep.inter_isBasis_closure_iff_subset_closure_inter.2 ?_‚ü©
  refine (hYX i).trans (M.closure_subset_closure_of_subset_closure ?_)
  exact (hB.2 i).subset_closure.trans
    (M.closure_subset_closure (inter_subset_inter_left B (hXY i)))

lemma IsMutualBasis.isMutualBasis_cls (hB : M.IsMutualBasis B Xs) :
    M.IsMutualBasis B (fun i ‚Ü¶ M.closure (Xs i)) :=
  hB.isMutualBasis_of_forall_subset_subset_closure (fun i ‚Ü¶ M.subset_closure (Xs i))
    (fun _ ‚Ü¶ Subset.rfl)

lemma IsMutualBasis.iInter_closure_eq_closure_iInter [Nonempty Œπ] (hB : M.IsMutualBasis B Xs) :
    (‚ãÇ i : Œπ, M.closure (Xs i)) = M.closure (‚ãÇ i : Œπ, Xs i) := by
  simp_rw [subset_antisymm_iff, subset_iInter_iff, ‚Üê hB.closure_inter_eq]
  rw [‚Üê closure_iInter_eq_iInter_closure_of_iUnion_indep, ‚Üê iInter_inter B Xs]
  ¬∑ refine ‚ü®M.closure_subset_closure inter_subset_left, fun i ‚Ü¶ ?_‚ü©
    rw [hB.closure_inter_eq]
    exact M.closure_subset_closure (iInter_subset _ i)
  exact hB.indep.subset (iUnion_subset (fun _ ‚Ü¶ inter_subset_right))

lemma Indep.isMutualBasis_powerset (hB : M.Indep B) : M.IsMutualBasis B (fun (I : ùí´ B) ‚Ü¶ I.1) where
  indep := hB
  forall_isBasis I := by
    rw [inter_eq_self_of_subset_left I.2]
    exact (hB.subset I.2).isBasis_self

/-- Given a mutual basis `B` for `Xs`, we can switch out the intersection of `B` with the
intersection of the `Xs` with any other base for the intersection of the `Xs`
and still have a mutual basis. -/
lemma IsMutualBasis.switch (hB : M.IsMutualBasis B Xs) (hIX : M.IsBasis I (‚ãÇ i, Xs i)) :
    M.IsMutualBasis ((B \ ‚ãÇ i, Xs i) ‚à™ I) Xs := by
  obtain hŒπ | hŒπ := isEmpty_or_nonempty Œπ
  ¬∑ refine ‚ü®?_, by simp‚ü©
    rw [iInter_of_empty, diff_univ, empty_union]
    exact hIX.indep
  set J := (‚ãÇ i, Xs i) ‚à© B with hJ

  have hJB : M.IsBasis J _ := hB.isBasis_iInter
  set B' := B \ J ‚à™ I with hB'
  have hB'E : B' ‚äÜ M.E :=
    union_subset (diff_subset.trans hB.indep.subset_ground) hIX.indep.subset_ground
  have hdj : Disjoint (B \ J) I
  ¬∑ rw [disjoint_iff_forall_ne]
    rintro e heBJ _ heI rfl
    apply hB.indep.notMem_closure_diff_of_mem heBJ.1
    refine mem_of_mem_of_subset ?_ <| M.closure_subset_closure
      (show J ‚äÜ B \ {e} from subset_diff_singleton inter_subset_right heBJ.2)
    rw [hJB.closure_eq_closure, ‚Üê hIX.closure_eq_closure]
    exact (M.subset_closure I) heI

  simp_rw [isMutualBasis_iff, show B \ ‚ãÇ i, Xs i = B \ J by rw [hJ, diff_inter_self_eq_diff]]
  refine ‚ü®?_, fun i ‚Ü¶ ?_‚ü©
  ¬∑ refine (hB.indep.isBasis_closure.switch_subset_of_isBasis_closure (I‚ÇÄ := J) (J‚ÇÄ := I)
      inter_subset_right (hIX.subset.trans ?_) ?_).indep
    ¬∑ exact hB.isBasis_iInter.subset_closure.trans <| M.closure_mono inter_subset_right
    rw [hJ, hB.isBasis_iInter.closure_eq_closure]
    exact hIX.isBasis_closure_right
  have hiX : I ‚äÜ Xs i := hIX.subset.trans (iInter_subset Xs i)
  have hJX : J ‚äÜ Xs i := inter_subset_left.trans (iInter_subset Xs i)
  rw [inter_union_distrib_left, ‚Üê inter_diff_assoc, inter_eq_self_of_subset_right hiX,  inter_comm,
    ‚Üê diff_inter_self_eq_diff, ‚Üê inter_assoc, inter_eq_self_of_subset_left
    (show J ‚äÜ B from inter_subset_right), inter_eq_self_of_subset_left hJX, inter_comm]
  refine IsBasis.switch_subset_of_isBasis_closure (hB.isBasis_inter i)
    (subset_inter hJX inter_subset_right) hiX ?_
  rw [hJB.closure_eq_closure]
  exact hIX.isBasis_closure_right

lemma IsMutualBasis.comp {Œ∂ : Sort*} {Xs : Œπ ‚Üí Set Œ±} (h : M.IsMutualBasis B Xs) (t : Œ∂ ‚Üí Œπ) :
    M.IsMutualBasis B (Xs ‚àò t) where
  indep := h.indep
  forall_isBasis i := h.forall_isBasis (t i)

lemma IsMutualBasis.mono (hI : M.IsMutualBasis I Xs) (hIB : I ‚äÜ B) (hB : M.Indep B) :
    M.IsMutualBasis B Xs :=
  hB.isMutualBasis_of_forall_subset_closure fun i ‚Ü¶ (hI.subset_closure_inter i).trans
    <| M.closure_subset_closure <| inter_subset_inter_right _ hIB

end IsMutualBasis
section IsModularFamily

/-- A set family is a `IsModularFamily` if it has a modular base. -/
def IsModularFamily (M : Matroid Œ±) (Xs : Œπ ‚Üí Set Œ±) := ‚àÉ B, M.IsMutualBasis B Xs

lemma Indep.isModularFamily (hI : M.Indep I) (hXs : ‚àÄ i, M.IsBasis ((Xs i) ‚à© I) (Xs i)) :
    M.IsModularFamily Xs := by
  simp_rw [hI.inter_isBasis_closure_iff_subset_closure_inter] at hXs
  refine ‚ü®I, hI, by simpa [hI.inter_isBasis_closure_iff_subset_closure_inter]‚ü©

lemma IsModularFamily.exists_isMutualBasis_isBase (h : M.IsModularFamily Xs) :
    ‚àÉ B, M.IsBase B ‚àß M.IsMutualBasis B Xs := by
  obtain ‚ü®I, hI‚ü© := h
  obtain ‚ü®B, hB, hIB‚ü© := hI.indep.exists_isBase_superset
  exact ‚ü®B, hB, hI.mono hIB hB.indep‚ü©

lemma IsMutualBasis.isModularFamily (hB : M.IsMutualBasis B Xs) : M.IsModularFamily Xs := ‚ü®B, hB‚ü©

lemma IsModularFamily.subset_ground_of_mem (h : M.IsModularFamily Xs) (i : Œπ) : Xs i ‚äÜ M.E :=
  let ‚ü®_, h‚ü© := h
  h.subset_ground i

lemma IsModularFamily.iInter_closure_eq_closure_iInter [Nonempty Œπ] (hXs : M.IsModularFamily Xs) :
    (‚ãÇ i : Œπ, M.closure (Xs i)) = M.closure (‚ãÇ i : Œπ, Xs i) :=
  let ‚ü®_, h‚ü© := hXs
  h.iInter_closure_eq_closure_iInter

lemma Indep.isModularFamily_of_subsets (hI : M.Indep I) (hJs : ‚ãÉ i, Js i ‚äÜ I) :
    M.IsModularFamily Js := by
  refine hI.isModularFamily (fun i ‚Ü¶ ?_)
  have hJI : Js i ‚äÜ I := (subset_iUnion _ i).trans hJs
  rw [inter_eq_self_of_subset_left hJI]
  exact (hI.subset hJI).isBasis_self

lemma IsModularFamily.isModularFamily_of_forall_subset_closure (h : M.IsModularFamily Xs)
    (hXY : ‚àÄ i, Xs i ‚äÜ Ys i) (hYX : ‚àÄ i, Ys i ‚äÜ M.closure (Xs i)) : M.IsModularFamily Ys :=
  let ‚ü®B, hB‚ü© := h
  ‚ü®B, hB.isMutualBasis_of_forall_subset_subset_closure hXY hYX‚ü©

lemma IsModularFamily.cls_isModularFamily (h : M.IsModularFamily Xs) :
    M.IsModularFamily (fun i ‚Ü¶ M.closure (Xs i)) :=
  let ‚ü®B, hB‚ü© := h
  ‚ü®B, hB.isMutualBasis_cls‚ü©

@[simp] lemma isModularFamily_of_isEmpty [IsEmpty Œπ] : M.IsModularFamily Xs :=
  M.empty_indep.isModularFamily_of_subsets (by simp)

@[simp]
lemma isModularFamily_iff_of_subsingleton [Subsingleton Œπ] :
    M.IsModularFamily Xs ‚Üî ‚àÄ i, Xs i ‚äÜ M.E := by
  obtain (h | ‚ü®‚ü®i‚ü©‚ü©) := isEmpty_or_nonempty Œπ; simp
  refine ‚ü®fun h ‚Ü¶ h.subset_ground_of_mem, fun h ‚Ü¶ ?_‚ü©
  obtain ‚ü®I, hI‚ü© := M.exists_isBasis (Xs i)
  exact ‚ü®I, hI.indep,
    fun j ‚Ü¶ by rwa [Subsingleton.elim j i, inter_eq_self_of_subset_right hI.subset] ‚ü©

lemma isModularFamily_of_isLoopEquiv (h : M.IsModularFamily Xs)
    (he : ‚àÄ i, M.IsLoopEquiv (Xs i) (Ys i)) : M.IsModularFamily Ys := by
  obtain ‚ü®B, hB‚ü© := h
  refine ‚ü®B, hB.indep, fun i ‚Ü¶ ?_‚ü©
  rw [‚Üê (he i).isBasis_iff, ‚Üê (he i).inter_eq_of_indep hB.indep]
  exact hB.isBasis_inter i

lemma IsModularFamily.restrict {R : Set Œ±} (h : M.IsModularFamily Xs) (hXR : ‚àÄ i, Xs i ‚äÜ R) :
    (M ‚Üæ R).IsModularFamily Xs := by
  obtain ‚ü®B, hB‚ü© := h
  refine Indep.isModularFamily (I := B ‚à© R) (by simpa using hB.indep.inter_right R) fun i ‚Ü¶ ?_
  rw [isBasis_restrict_iff', inter_eq_self_of_subset_left (hB.subset_ground i),
    inter_comm B, ‚Üê inter_assoc, inter_eq_self_of_subset_left (hXR i), and_iff_left (hXR i)]
  exact hB.isBasis_inter i

lemma IsModularFamily.delete {D : Set Œ±} (h : M.IsModularFamily Xs) (hXD : ‚àÄ i, Disjoint (Xs i) D) :
    (M Ôºº D).IsModularFamily Xs :=
  h.restrict fun i ‚Ü¶ subset_diff.2 ‚ü®h.subset_ground_of_mem i, hXD i‚ü©

lemma IsModularFamily.ofRestrict' {R : Set Œ±}
    (h : (M ‚Üæ R).IsModularFamily Xs) : M.IsModularFamily (fun i ‚Ü¶ (Xs i) ‚à© M.E) := by
  obtain ‚ü®B, hBb, hB‚ü© := h
  -- obtain ‚ü®B', hB'‚ü© := hBb.indep.of_restrict
  refine ‚ü®B, hBb.1, fun i ‚Ü¶ ?_‚ü©
  obtain IsBasis := hB i
  rw [isBasis_restrict_iff'] at IsBasis
  rw [inter_assoc, inter_eq_self_of_subset_right hBb.of_restrict.subset_ground]
  exact IsBasis.1

lemma IsModularFamily.ofRestrict {M : Matroid Œ±} {R : Set Œ±} (hR : R ‚äÜ M.E)
    (h : (M ‚Üæ R).IsModularFamily Xs) : M.IsModularFamily Xs := by
  convert h.ofRestrict' with i
  rw [inter_eq_self_of_subset_left <| (h.subset_ground_of_mem i).trans hR]

/-- A subfamily of a modular family is a modular family. -/
lemma IsModularFamily.comp {Œ∂ : Sort*} (h : M.IsModularFamily Xs) (t : Œ∂ ‚Üí Œπ) :
    M.IsModularFamily (Xs ‚àò t) := by
  obtain ‚ü®B, hB, hBXs‚ü© := h
  exact ‚ü®B, hB, fun i ‚Ü¶ (by simpa using hBXs (t i))‚ü©

lemma IsModularFamily.set_biInter_comp {Xs : Œ∑ ‚Üí Set Œ±} (h : M.IsModularFamily Xs) (t : Œπ ‚Üí Set Œ∑)
    (ht : ‚àÄ j, (t j).Nonempty) : M.IsModularFamily (fun j ‚Ü¶ ‚ãÇ i ‚àà t j, (Xs i)) := by
  obtain ‚ü®B, hB‚ü© := h
  exact ‚ü®B, hB.indep, fun j ‚Ü¶ hB.isBasis_biInter (ht j)‚ü©

lemma IsModularFamily.map {Œ≤ : Type*} (f : Œ± ‚Üí Œ≤) (hf : InjOn f M.E) (h : M.IsModularFamily Xs) :
    (M.map f hf).IsModularFamily (fun i ‚Ü¶ f '' (Xs i)) := by
  obtain ‚ü®B, hB, hBX‚ü© := h
  refine ‚ü®f '' B, hB.map _ hf , fun i ‚Ü¶ ?_‚ü©
  convert (hBX i).map hf
  rw [hf.image_inter (hBX i).subset_ground hB.subset_ground]

lemma IsModularFamily.of_comap {Œ≤ : Type*} {f : Œ± ‚Üí Œ≤} {M : Matroid Œ≤}
    (hX : (M.comap f).IsModularFamily Xs) : M.IsModularFamily (fun i ‚Ü¶ f '' (Xs i)) := by
  obtain ‚ü®B, hB‚ü© := hX
  refine ‚ü®f '' B, hB.indep.1, fun i ‚Ü¶ ?_‚ü©
  obtain ‚ü®hBi, hBinj‚ü© := comap_indep_iff.1 hB.indep
  have hB_inter := comap_isBasis_iff.1 <| hB.isBasis_inter i
  refine (hBi.inter_left _).isBasis_of_subset_of_subset_closure inter_subset_left ?_
  grw [‚Üê image_inter_subset, hB_inter.1.closure_eq_closure,
    ‚Üê subset_closure _ _ hB_inter.1.subset_ground]

lemma IsModularFamily.comap_iff {Œ≤ : Type*} {f : Œ± ‚Üí Œ≤} {M : Matroid Œ≤} (hf : f.Injective):
    (M.comap f).IsModularFamily Xs ‚Üî M.IsModularFamily (fun i ‚Ü¶ f '' (Xs i)) := by
  refine ‚ü®IsModularFamily.of_comap, fun ‚ü®B, hB‚ü© ‚Ü¶ ?_‚ü©
  have hss := hB.isBasis_iUnion.subset
  rw [‚Üê image_iUnion] at hss
  obtain ‚ü®B', hB', hinj‚ü© :=
    exists_image_eq_injOn_of_subset_range (hss.trans (image_subset_range ..))
  refine ‚ü®B', ‚ü®hB.indep.subset (by simp [hB']), hinj‚ü©, fun i ‚Ü¶ ?_‚ü©
  have hBi := hB.isBasis_inter i
  simp only [comap_isBasis_iff, inter_subset_left, and_true, image_inter hf]
  rwa [and_iff_left hf.injOn, hB', ‚Üê inter_assoc,
    inter_eq_self_of_subset_left (image_subset _ (subset_iUnion _ _))]

lemma isModularFamily_map_iff (f : Œ± ‚Üí Œ∑) (hf : InjOn f M.E) {Xs : Œπ ‚Üí Set Œ∑} :
    (M.map f hf).IsModularFamily Xs ‚Üî ‚àÉ Ys, M.IsModularFamily Ys ‚àß ‚àÄ i, Xs i = f '' (Ys i) := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun ‚ü®Ys, hYs, h_eq‚ü© ‚Ü¶ ?_‚ü©
  ¬∑ obtain ‚ü®B, hB, h‚ü© := h
    simp_rw [map_isBasis_iff'] at h
    rw [map_indep_iff] at hB
    obtain ‚ü®B, hB, rfl‚ü© := hB
    choose Is hIs using h
    choose Ys hYs using hIs
    refine ‚ü®Ys, ‚ü®B, hB, fun i ‚Ü¶ ?_‚ü©, fun i ‚Ü¶ (hYs i).2.2‚ü©
    convert (hYs i).1
    rw [‚Üê hf.image_eq_image_iff (inter_subset_right.trans hB.subset_ground)
      (hYs i).1.indep.subset_ground, ‚Üê (hYs i).2.1, (hYs i).2.2, hf.image_inter]
    ¬∑ exact (hYs i).1.subset_ground
    exact hB.subset_ground

  convert hYs.map f hf with i
  apply h_eq

lemma IsModularFamily.mapEmbedding {Œ≤ : Type*} (f : Œ± ‚Ü™ Œ≤) (h : M.IsModularFamily Xs) :
    (M.mapEmbedding f).IsModularFamily (fun i ‚Ü¶ f '' (Xs i)) := by
  obtain ‚ü®B, hB, hBX‚ü© := h
  refine ‚ü®f '' B, hB.mapEmbedding f, fun i ‚Ü¶ ?_‚ü©
  convert (hBX i).mapEmbedding f
  rw [image_inter f.injective]

lemma IsModularFamily.of_contract_indep (h : (M Ôºè I).IsModularFamily Xs) (hI : M.Indep I) :
    M.IsModularFamily (fun i ‚Ü¶ Xs i ‚à™ I) := by
  obtain ‚ü®B, hB, h‚ü© := h
  rw [hI.contract_indep_iff] at hB
  refine ‚ü®B ‚à™ I, hB.2, fun i ‚Ü¶ Indep.isBasis_of_subset_of_subset_closure ?_ ?_ ?_‚ü©
  ¬∑ exact hB.2.inter_left _
  ¬∑ exact inter_subset_left
  rw [‚Üê inter_union_distrib_right]
  refine union_subset ((h i).subset_closure.trans ?_)
    (M.subset_closure_of_subset' subset_union_right)
  simp [contract_closure_eq, diff_subset]

/-- A mutual basis can be chosen to contain a prescribed independent subset of the intersection. -/
lemma IsModularFamily.exists_isMutualBasis_superset_of_indep_of_subset_inter
    (h : M.IsModularFamily Xs) (hI : M.Indep I) (hIX : I ‚äÜ ‚ãÇ i, Xs i) :
    ‚àÉ B, M.IsMutualBasis B Xs ‚àß I ‚äÜ B := by
  obtain he | hne := isEmpty_or_nonempty Œπ
  ¬∑ exact ‚ü®I, ‚ü®hI, by simp‚ü©, rfl.subset‚ü©
  obtain ‚ü®B, hB‚ü© := h
  obtain ‚ü®J, hJ, hIJ‚ü© := hI.subset_isBasis_of_subset hIX
  exact ‚ü®_,  hB.switch hJ, hIJ.trans subset_union_right‚ü©

/-- If `C` is spanned by the intersection of a modular family `Xs`,
then we get a modular family in `M Ôºè C`.  -/
lemma IsModularFamily.contract (h : M.IsModularFamily Xs) {C : Set Œ±}
    (hC : ‚àÄ i, C ‚äÜ M.closure (Xs i)) : (M Ôºè C).IsModularFamily (fun i ‚Ü¶ (Xs i) \ C) := by
  obtain he | hne := isEmpty_or_nonempty Œπ
  ¬∑ simp

  obtain ‚ü®I, hI‚ü© := M.exists_isBasis' C
  rw [hI.contract_eq_contract_delete]
  refine IsModularFamily.delete ?_ fun i ‚Ü¶ disjoint_sdiff_left.mono_right diff_subset
  have hu := h.isModularFamily_of_forall_subset_closure (Ys := fun i ‚Ü¶ (Xs i ‚à™ C))
    (fun _ ‚Ü¶ subset_union_left)
    (fun i ‚Ü¶ union_subset (M.subset_closure _ (h.subset_ground_of_mem i)) (hC i))

  obtain ‚ü®B, hB, hIB‚ü© := hu.exists_isMutualBasis_superset_of_indep_of_subset_inter hI.indep
    (by simp [(hI.subset.trans subset_union_right)])

  have hi : (M Ôºè I).Indep (B \ I) := by simp [hI.indep.contract_indep_iff,
    union_eq_self_of_subset_right hIB, disjoint_sdiff_left, hB.indep]
  refine hi.isModularFamily fun i ‚Ü¶ (hi.inter_left _).isBasis_of_subset_of_subset_closure
    inter_subset_left ?_

  rw [contract_closure_eq, inter_union_distrib_right, diff_union_of_subset hIB,
    union_inter_distrib_right, inter_eq_self_of_subset_left hIB,
    closure_union_congr_right hI.closure_eq_closure, inter_union_distrib_right,
    diff_union_self, ‚Üê inter_union_distrib_right, diff_subset_iff, union_comm,
    diff_union_eq_union_of_subset _ hI.subset]
  have hXb := (hB.isBasis_inter i).subset_closure

  refine (subset_union_left.trans (hXb.trans ?_))
  refine (M.closure_subset_closure ?_).trans subset_union_left
  rw [union_inter_distrib_right]
  refine union_subset_union_right _ inter_subset_left

/-- A `IsModularFamily` of flats in a finite-rank matroid is finite. -/
lemma IsModularFamily.finite_of_forall_isFlat [M.RankFinite] (h : M.IsModularFamily Xs)
    (h_isFlat : ‚àÄ i, M.IsFlat (Xs i)) : (range Xs).Finite := by
  obtain ‚ü®B, hB‚ü© := h
  refine Finite.of_finite_image (f := fun X ‚Ü¶ X ‚à© B)
    (hB.indep.finite.finite_subsets.subset (by simp)) ?_
  simp only [InjOn, mem_range, forall_exists_index, forall_apply_eq_imp_iff]
  intro i j h_eq
  rw [‚Üê (h_isFlat i).closure, ‚Üê (hB.isBasis_inter i).closure_eq_closure,
    ‚Üê (h_isFlat j).closure, ‚Üê (hB.isBasis_inter j).closure_eq_closure, h_eq]



  -- have := (subset_range_iff_exists_image_eq (Œ± := Œπ) (s := C) (f := Xs)).1
  -- have := h.comp (fun X : C ‚Ü¶ X)

-- lemma IsModularFamily_of_chain [Finitary M] (hX : IsChain (¬∑ ‚äÜ ¬∑) (range Xs))
--  (hE : ‚àÄ i, Xs i ‚äÜ M.E) :
--     M.IsModularFamily Xs := by
--   -- set Is := {I : Set Œ± | ‚àÄ i, M.IsBasis (I ‚à© Xs i) (Xs i) ‚à® I ‚äÜ M.closure (Xs i)}
--   -- refine Indep.isModularFamily (I := ‚ãÉ‚ÇÄ Is) ?_ ?_
--   set Is : (Set (Set Œ±)) :=
--     {I : Set Œ± | M.Indep I ‚àß ‚àÄ i, M.IsBasis (Xs i ‚à© I) (Xs i) ‚à® I ‚äÜ Xs i}
--     with hIs
--   have h_chain : ‚àÄ Ks ‚äÜ Is, IsChain (¬∑ ‚äÜ ¬∑) Ks ‚Üí ‚àÉ J ‚àà Is, ‚àÄ I ‚àà Ks, I ‚äÜ J
--   ¬∑ intro Ks hKsIs h_chain
--     refine ‚ü®‚ãÉ‚ÇÄ Ks, ‚ü®?_, fun i ‚Ü¶ ?_‚ü©, fun _ ‚Ü¶ subset_sUnion_of_mem‚ü©
--     ¬∑ exact Indep.sUnion_chain (fun I hI ‚Ü¶ (hKsIs hI).1) h_chain


--     simp only [sUnion_subset_iff, or_iff_not_imp_right, not_forall, Classical.not_imp,
--       forall_exists_index, and_imp]
--     intro K hK hKcl

--     have hbas : M.IsBasis (Xs i ‚à© K) (Xs i) := by simpa [hKcl] using (hKsIs hK).2 i
--     convert hbas using 1
--     rw [subset_antisymm_iff, and_iff_left (inter_subset_inter_right _ (subset_sUnion_of_mem hK))]
--     simp +contextual only [subset_def, mem_inter_iff, mem_sUnion, true_and,
--       and_imp, forall_exists_index]

--     intro e heX K' hK' heK'
--     obtain hle | hle := h_chain.total hK' hK
--     ¬∑ exact hle heK'

--     obtain hbas' | hcl := (hKsIs hK').2 i
--     ¬∑ refine (hbas.mem_of_insert_indep heX (hbas'.indep.subset (insert_subset ‚ü®heX, heK'‚ü© ?_))).2
--       exact inter_subset_inter_right _ hle

--     have h_eq := hbas.eq_of_subset_indep ?_ (inter_subset_inter_right _ hle) inter_subset_left
--     refine (h_eq.symm.subset ‚ü®heX, heK'‚ü©).2
--     exact (hKsIs hK').1.inter_left _

--   obtain ‚ü®I, hI‚ü© := zorn_subset Is h_chain
--   refine hI.prop.1.isModularFamily fun i ‚Ü¶ ?_
--   refine (hI.prop.2 i).elim id fun hIcl ‚Ü¶ ?_




--   refine (hI.prop.1.inter_left (Xs i)).isBasis_of_forall_insert inter_subset_left ?_


--   simp only [inter_eq_self_of_subset_right hIcl, mem_diff, Dep, insert_subset_iff,
--     hIcl.trans (hE i), and_true, and_imp]
--   refine fun f hfX hfI ‚Ü¶ ‚ü®fun hi ‚Ü¶ hfI ?_, (hE i hfX)‚ü©




--   refine hI.mem_of_prop_insert ‚ü®hi, fun j ‚Ü¶ ?_‚ü©
--   obtain hle | hle := hX.total (x := Xs i) (y := Xs j) (by simp) (by simp)
--   ¬∑ exact .inr (insert_subset (hle hfX) (hIcl.trans hle))

--   obtain hbasj | b := (hI.prop.2 j)
--   ¬∑ rw [‚Üê hbasj.eq_of_subset_indep (hi.inter_left _)
--       (inter_subset_inter_right _ (subset_insert _ _)) (inter_subset_left)]
--     exact .inl hbasj



end IsModularFamily

section IsModularPair

/-- Sets `X,Y` are a modular pair if some independent set contains bases for both. -/
def IsModularPair (M : Matroid Œ±) (X Y : Set Œ±) :=
  M.IsModularFamily (fun i : Bool ‚Ü¶ bif i then X else Y)

lemma IsModularPair.symm (h : M.IsModularPair X Y) : M.IsModularPair Y X := by
   obtain ‚ü®B, hB‚ü© := h
   exact ‚ü®B, hB.indep, fun i ‚Ü¶ by simpa using hB.2 !i‚ü©

lemma isModularPair_comm : M.IsModularPair X Y ‚Üî M.IsModularPair Y X :=
  ‚ü®IsModularPair.symm, IsModularPair.symm‚ü©

@[aesop unsafe 20% (rule_sets := [Matroid])]
lemma IsModularPair.subset_ground_left (h : M.IsModularPair X Y) : X ‚äÜ M.E :=
  h.subset_ground_of_mem true

@[aesop unsafe 20% (rule_sets := [Matroid])]
lemma IsModularPair.subset_ground_right (h : M.IsModularPair X Y) : Y ‚äÜ M.E :=
  h.subset_ground_of_mem false

lemma isModularPair_iff {M : Matroid Œ±} {X Y : Set Œ±} :
    M.IsModularPair X Y ‚Üî ‚àÉ I, M.Indep I ‚àß M.IsBasis (X ‚à© I) X ‚àß M.IsBasis (Y ‚à© I) Y := by
  simp only [IsModularPair, IsModularFamily, indep_iff]
  refine ‚ü®fun ‚ü®B, hB, hB'‚ü© ‚Ü¶ ‚ü®B, indep_iff.1 hB, ?_‚ü©,
    fun ‚ü®I, ‚ü®B, hB, hIB‚ü©, hIX, hIY‚ü© ‚Ü¶ ‚ü®B, hB.indep, ?_‚ü© ‚ü©
  ¬∑ exact ‚ü®by simpa using hB' true, by simpa using hB' false‚ü©
  simp only [Bool.forall_bool, cond_false, cond_true]
  rw [‚Üê hIX.eq_of_subset_indep (hB.indep.inter_left X) (inter_subset_inter_right _ hIB)
    inter_subset_left, ‚Üê hIY.eq_of_subset_indep (hB.indep.inter_left Y)
    (inter_subset_inter_right _ hIB) inter_subset_left]
  exact ‚ü®hIY,hIX‚ü©

lemma IsModularFamily.isModularPair (h : M.IsModularFamily Xs) (i j : Œπ) :
    M.IsModularPair (Xs i) (Xs j) := by
  obtain ‚ü®B, hB‚ü© := h
  exact isModularPair_iff.2 ‚ü®B, hB.indep, hB.isBasis_inter i, hB.isBasis_inter j‚ü©

lemma isModularPair_iff_exists_subsets_closure_inter :
    M.IsModularPair X Y ‚Üî ‚àÉ I, M.Indep I ‚àß X ‚äÜ M.closure (X ‚à© I) ‚àß Y ‚äÜ M.closure (Y ‚à© I)  := by
  rw [isModularPair_iff]
  refine ‚ü®fun ‚ü®I,hI,h‚ü© ‚Ü¶ ‚ü®I,hI,?_‚ü©, fun ‚ü®I,hI,h‚ü© ‚Ü¶ ‚ü®I,hI,?_‚ü©‚ü©
  ¬∑ rwa [‚Üê hI.inter_isBasis_closure_iff_subset_closure_inter,
      ‚Üê hI.inter_isBasis_closure_iff_subset_closure_inter]
  rwa [hI.inter_isBasis_closure_iff_subset_closure_inter,
    hI.inter_isBasis_closure_iff_subset_closure_inter]

lemma IsModularPair.exists_subsets_closure_inter (h : M.IsModularPair X Y) :
    ‚àÉ I, M.Indep I ‚àß X ‚äÜ M.closure (X ‚à© I) ‚àß Y ‚äÜ M.closure (Y ‚à© I) :=
  isModularPair_iff_exists_subsets_closure_inter.1 h

lemma isModularPair_iff_exists_isBasis_isBasis :
    M.IsModularPair X Y ‚Üî ‚àÉ I J, M.IsBasis I X ‚àß M.IsBasis J Y ‚àß M.Indep (I ‚à™ J) := by
  rw [isModularPair_iff]
  refine ‚ü®fun ‚ü®I,hI,hIX,hIY‚ü© ‚Ü¶ ‚ü®_, _, hIX, hIY, hI.subset (by simp)‚ü©,
    fun ‚ü®I,J,hI,hJ,hi‚ü© ‚Ü¶ ‚ü®_,hi, ?_‚ü©‚ü©
  simp_rw [hi.inter_isBasis_closure_iff_subset_closure_inter]
  use hI.subset_closure.trans (M.closure_subset_closure (subset_inter hI.subset subset_union_left))
  exact hJ.subset_closure.trans
    (M.closure_subset_closure (subset_inter hJ.subset subset_union_right))

lemma IsModularPair.exists_isMutualBasis_isBase (h : M.IsModularPair X Y) : ‚àÉ B,
    M.IsBase B ‚àß M.IsBasis ((X ‚à™ Y) ‚à© B) (X ‚à™ Y) ‚àß M.IsBasis (X ‚à© B) X ‚àß
    M.IsBasis (Y ‚à© B) Y ‚àß M.IsBasis (X ‚à© Y ‚à© B) (X ‚à© Y) := by
  rw [IsModularPair] at h
  obtain ‚ü®B, hB, hB'‚ü© := h.exists_isMutualBasis_isBase
  exact ‚ü®B, hB, by simpa using hB'.isBasis_iUnion,
    by simpa using hB'.isBasis_inter true, by simpa using hB'.isBasis_inter false,
    by simpa using hB'.isBasis_iInter‚ü©

lemma IsModularPair.exists_common_isBasis (h : M.IsModularPair X Y) : ‚àÉ I,
    M.IsBasis I (X ‚à™ Y) ‚àß M.IsBasis (I ‚à© X) X ‚àß
    M.IsBasis (I ‚à© Y) Y ‚àß M.IsBasis (I ‚à© X ‚à© Y) (X ‚à© Y) := by
  obtain ‚ü®B, hB‚ü© := h
  refine ‚ü®(X ‚à™ Y) ‚à© B, ?_‚ü©
  rw [inter_right_comm, inter_eq_self_of_subset_right subset_union_left,
    inter_right_comm, inter_eq_self_of_subset_right subset_union_right, inter_right_comm]
  refine ‚ü®?_, by simpa using hB.isBasis_inter true, by simpa using hB.isBasis_inter false, ?_‚ü©
  ¬∑ have hu := hB.isBasis_iUnion
    rwa [‚Üê union_eq_iUnion] at hu
  have hi := hB.isBasis_iInter
  rwa [‚Üê inter_eq_iInter] at hi

lemma IsModularPair.inter_closure_eq (h : M.IsModularPair X Y) :
    M.closure (X ‚à© Y) = M.closure X ‚à© M.closure Y := by
  convert (IsModularFamily.iInter_closure_eq_closure_iInter h).symm
  ¬∑ rw [inter_eq_iInter]
  simp_rw [Bool.cond_eq_ite, apply_ite, ‚Üê Bool.cond_eq_ite, inter_eq_iInter]

lemma isModularPair_of_subset (hXY : X ‚äÜ Y) (hY : Y ‚äÜ M.E) : M.IsModularPair X Y := by
  obtain ‚ü®I,J, hI, hJ, hIJ‚ü© := M.exists_isBasis_subset_isBasis hXY
  refine isModularPair_iff.2 ‚ü®J, hJ.indep, ?_, by rwa [inter_eq_self_of_subset_right hJ.subset]‚ü©
  rwa [‚Üê hI.eq_of_subset_indep (hJ.indep.inter_left X) (subset_inter hI.subset hIJ)
    inter_subset_left]

lemma Indep.isModularPair_of_union (hi : M.Indep (I ‚à™ J)) : M.IsModularPair I J := by
  simpa only [iUnion_subset_iff, Bool.forall_bool, cond_false, subset_union_right, cond_true,
    subset_union_left, and_self, forall_true_left] using
    hi.isModularFamily_of_subsets (Js := fun i ‚Ü¶ bif i then I else J)

lemma IsModularPair.of_subset_closure_subset_closure (h : M.IsModularPair X Y) (hXX' : X ‚äÜ X')
    (hX' : X' ‚äÜ M.closure X) (hYY' : Y ‚äÜ Y') (hY' : Y' ‚äÜ M.closure Y) : M.IsModularPair X' Y' := by
  apply IsModularFamily.isModularFamily_of_forall_subset_closure h
  ¬∑ simp [hYY', hXX']
  simp [hY', hX']

lemma IsModularPair.of_subset_closure_left (h : M.IsModularPair X Y) (hXX' : X ‚äÜ X')
    (hX' : X' ‚äÜ M.closure X) : M.IsModularPair X' Y :=
  h.of_subset_closure_subset_closure hXX' hX' Subset.rfl (M.subset_closure Y)

lemma IsModularPair.of_subset_closure_right (h : M.IsModularPair X Y) (hYY' : Y ‚äÜ Y')
    (hY' : Y' ‚äÜ M.closure Y) : M.IsModularPair X Y' :=
  (h.symm.of_subset_closure_left hYY' hY').symm

lemma IsModularPair.of_isBasis_left (h : M.IsModularPair I Y) (hIX : M.IsBasis I X) :
    M.IsModularPair X Y :=
  h.of_subset_closure_left hIX.subset hIX.subset_closure

lemma IsModularPair.of_isBasis_right (h : M.IsModularPair X J) (hJY : M.IsBasis J Y) :
    M.IsModularPair X Y :=
  h.of_subset_closure_right hJY.subset hJY.subset_closure

lemma IsModularPair.of_isBasis_of_isBasis (h : M.IsModularPair I J) (hIX : M.IsBasis I X)
    (hJY : M.IsBasis J Y) : M.IsModularPair X Y :=
  (h.of_isBasis_left hIX).of_isBasis_right hJY

lemma IsModularPair.closure_left (h : M.IsModularPair X Y) : M.IsModularPair (M.closure X) Y :=
  h.of_subset_closure_left (M.subset_closure X) Subset.rfl

lemma IsModularPair.closure_right (h : M.IsModularPair X Y) : M.IsModularPair X (M.closure Y) :=
  h.symm.closure_left.symm

lemma IsModularPair.closure_closure (h : M.IsModularPair X Y) :
    M.IsModularPair (M.closure X) (M.closure Y) :=
  h.closure_left.closure_right

lemma isModularPair_loops (M : Matroid Œ±) (hX : X ‚äÜ M.E) : M.IsModularPair X (M.loops) :=
  ((M.isModularPair_of_subset (empty_subset X) hX).closure_left).symm

lemma isModularPair_singleton (he : e ‚àà M.E) (hX : X ‚äÜ M.E) (heX : e ‚àâ M.closure X) :
    M.IsModularPair {e} X := by
  obtain ‚ü®I, hI‚ü© := M.exists_isBasis X
  have hi : M.Indep (insert e I) := by
    rw [hI.indep.insert_indep_iff, hI.closure_eq_closure]
    exact Or.inl ‚ü®he, heX‚ü©
  have hI' := hI.insert_isBasis_insert hi
  rw [‚Üê singleton_union] at hI'
  exact hI'.indep.isModularPair_of_union.of_isBasis_right hI

lemma IsModularPair.eRk_add_eRk (h : M.IsModularPair X Y) :
    M.eRk X + M.eRk Y = M.eRk (X ‚à© Y) + M.eRk (X ‚à™ Y) := by
  obtain ‚ü®I, hIu, hIX, hIY, hIi‚ü© := h.exists_common_isBasis
  rw [hIi.eRk_eq_encard, hIu.eRk_eq_encard, hIX.eRk_eq_encard, hIY.eRk_eq_encard,
    ‚Üê encard_union_add_encard_inter, ‚Üê inter_union_distrib_left, ‚Üê inter_inter_distrib_left,
    ‚Üê inter_assoc, inter_eq_self_of_subset_left hIu.subset, add_comm]

lemma IsRkFinite.isModularPair_iff_eRk (hXfin : M.IsRkFinite X) (hYfin : M.IsRkFinite Y)
    (hXE : X ‚äÜ M.E := by aesop_mat) (hYE : Y ‚äÜ M.E := by aesop_mat) :
    M.IsModularPair X Y ‚Üî M.eRk X + M.eRk Y = M.eRk (X ‚à© Y) + M.eRk (X ‚à™ Y) := by
  refine ‚ü®fun h ‚Ü¶ h.eRk_add_eRk, fun hr ‚Ü¶ isModularPair_iff_exists_isBasis_isBasis.2 ?_ ‚ü©
  obtain ‚ü®Ii, hIi‚ü© := M.exists_isBasis (X ‚à© Y)
  have hifin : Ii.encard ‚â† ‚ä§ := by
    simpa using hXfin.inter_right.finite_of_isBasis hIi
  obtain ‚ü®IX, hIX, hX‚ü© := hIi.indep.subset_isBasis_of_subset
    (hIi.subset.trans inter_subset_left)
  obtain ‚ü®IY, hIY, hY‚ü© := hIi.indep.subset_isBasis_of_subset
    (hIi.subset.trans inter_subset_right)
  refine ‚ü®IX, IY, hIX, hIY, ?_‚ü©
  rw [hIi.eRk_eq_encard, hIX.eRk_eq_encard, ‚Üê encard_diff_add_encard_of_subset hX,
    add_comm (encard _), add_assoc, WithTop.add_left_inj hifin, hIY.eRk_eq_encard,
    ‚Üê encard_union_add_encard_inter, ‚Üê union_eq_self_of_subset_left hY, ‚Üê union_assoc,
    diff_union_self, union_eq_self_of_subset_right hX] at hr
  refine IsBasis.indep <| (hXfin.union hYfin).isBasis_of_subset_closure_of_subset_of_encard_le ?_
    (union_subset_union hIX.subset hIY.subset) (le_of_add_le_left hr.le)
  rw [‚Üê M.closure_union_closure_left_eq, ‚Üê M.closure_union_closure_right_eq]
  exact (M.subset_closure _).trans
    (M.closure_subset_closure (union_subset_union hIX.subset_closure hIY.subset_closure))

-- TODO : this might be true without one of the `IsRkFinite` assumptions due to junk values.
lemma IsRkFinite.isModularPair_iff_rk (hXfin : M.IsRkFinite X) (hYfin : M.IsRkFinite Y)
    (hXE : X ‚äÜ M.E := by aesop_mat) (hYE : Y ‚äÜ M.E := by aesop_mat) :
    M.IsModularPair X Y ‚Üî M.rk X + M.rk Y = M.rk (X ‚à© Y) + M.rk (X ‚à™ Y) := by
  rw [hXfin.isModularPair_iff_eRk hYfin, ‚Üê Nat.cast_inj (R := ‚Ñï‚àû), ‚Üê hXfin.cast_rk_eq,
    ‚Üê hYfin.cast_rk_eq, ‚Üê hXfin.inter_right.cast_rk_eq, ‚Üê (hXfin.union hYfin).cast_rk_eq,
    Nat.cast_add, Nat.cast_add]

lemma isModularPair_iff_rk [RankFinite M] (hXE : X ‚äÜ M.E := by aesop_mat)
    (hYE : Y ‚äÜ M.E := by aesop_mat) :
    M.IsModularPair X Y ‚Üî M.rk X + M.rk Y = M.rk (X ‚à© Y) + M.rk (X ‚à™ Y) := by
  rw [(M.isRkFinite_set X).isModularPair_iff_rk (M.isRkFinite_set Y)]

lemma IsModularFamily.isModularPair_compl_biUnion {Xs : Œ∑ ‚Üí Set Œ±} (h : M.IsModularFamily Xs)
    (A : Set Œ∑) : M.IsModularPair (‚ãÉ i ‚àà A, Xs i) (‚ãÉ i ‚àà A·∂ú, Xs i) := by
  rw [isModularPair_iff]
  obtain ‚ü®B, hB‚ü© := h
  exact ‚ü®B, hB.indep, hB.isBasis_biUnion A, hB.isBasis_biUnion A·∂ú‚ü©

lemma IsModularFamily.isModularPair_compl_biInter {Xs : Œ∑ ‚Üí Set Œ±} (h : M.IsModularFamily Xs)
    (A : Set Œ∑) (hA : A.Nonempty) (hA' : A ‚â† univ) :
    M.IsModularPair (‚ãÇ i ‚àà A, Xs i) (‚ãÇ i ‚àà A·∂ú, Xs i) := by
  rw [isModularPair_iff]
  obtain ‚ü®B, hB‚ü© := h
  exact ‚ü®B, hB.indep, hB.isBasis_biInter hA, hB.isBasis_biInter (by rwa [nonempty_compl])‚ü©

lemma IsModularFamily.isModularPair_singleton_compl_biUnion {Xs : Œ∑ ‚Üí Set Œ±}
    (h : M.IsModularFamily Xs) (i‚ÇÄ : Œ∑) :
    M.IsModularPair (Xs i‚ÇÄ) (‚ãÉ i ‚àà ({i‚ÇÄ} : Set Œ∑)·∂ú, Xs i) := by
  convert h.isModularPair_compl_biUnion {i‚ÇÄ}; simp

lemma IsModularFamily.isModularPair_singleton_compl_biInter [Nontrivial Œ∑] {Xs : Œ∑ ‚Üí Set Œ±}
    (h : M.IsModularFamily Xs) (i‚ÇÄ : Œ∑) :
    M.IsModularPair (Xs i‚ÇÄ) (‚ãÇ i ‚àà ({i‚ÇÄ} : Set Œ∑)·∂ú, Xs i) := by
  convert h.isModularPair_compl_biInter {i‚ÇÄ} (by simp)
    (by simp); simp

lemma isModularPair_insert_closure (M : Matroid Œ±) (X : Set Œ±) (e f : Œ±) :
    M.IsModularPair (M.closure (insert e X)) (M.closure (insert f X)) := by
  obtain ‚ü®I, hI‚ü© := M.exists_isBasis' X

  rw [‚Üê closure_insert_closure_eq_closure_insert,
    ‚Üê closure_insert_closure_eq_closure_insert (e := f), ‚Üê hI.closure_eq_closure]
  obtain (he | he) := em' (e ‚àà M.E)
  ¬∑ rw [‚Üê closure_inter_ground, insert_inter_of_notMem he, closure_inter_ground]
    exact isModularPair_of_subset (M.closure_subset_closure (subset_insert _ _))
      (M.closure_subset_ground _)
  obtain (hf | hf) := em' (f ‚àà M.E)
  ¬∑ rw [isModularPair_comm, ‚Üê closure_inter_ground, insert_inter_of_notMem hf,
      closure_inter_ground]
    exact isModularPair_of_subset (M.closure_subset_closure (subset_insert _ _))
      (M.closure_subset_ground _)

  obtain (hfI | hfI) := em (f ‚àà M.closure I)
  ¬∑ rw [isModularPair_comm, insert_eq_of_mem hfI]
    exact isModularPair_of_subset (M.closure_subset_closure (subset_insert _ _))
      (M.closure_subset_ground _)
  rw [closure_insert_closure_eq_closure_insert, closure_insert_closure_eq_closure_insert]
  obtain (hef | hef) := em (e ‚àà M.closure (insert f I))
  ¬∑ refine isModularPair_of_subset (M.closure_subset_closure_of_subset_closure ?_)
      (M.closure_subset_ground _)
    exact insert_subset hef (M.subset_closure_of_subset (subset_insert _ _)
      (insert_subset hf hI.indep.subset_ground))

  refine IsModularPair.closure_closure ?_
  apply Indep.isModularPair_of_union
  rw [union_insert, union_eq_self_of_subset_right (subset_insert _ _), insert_comm,
    Indep.insert_indep_iff]
  ¬∑ exact .inl ‚ü®he, hef‚ü©
  rw [hI.indep.insert_indep_iff]
  exact .inl ‚ü®hf, hfI‚ü©

lemma IsModularPair.restrict {R : Set Œ±} (hXY : M.IsModularPair X Y) (hXR : X ‚äÜ R) (hYR : Y ‚äÜ R) :
    (M ‚Üæ R).IsModularPair X Y :=
  IsModularFamily.restrict hXY <| by simp [hXR, hYR]

lemma IsModularPair.contract_subset_closure {C : Set Œ±} (hXY : M.IsModularPair X Y)
    (hCX : C ‚äÜ M.closure X) (hCY : C ‚äÜ M.closure Y) : (M Ôºè C).IsModularPair (X \ C) (Y \ C) := by
  have hrw : (fun i ‚Ü¶ bif i then X \ C else Y \ C) = fun i ‚Ü¶ ((bif i then X else Y) \ C)
  ¬∑ ext (rfl | rfl) <;> rfl
  rw [IsModularPair, hrw]
  simpa [hCX, hCY] using IsModularFamily.contract (C := C) hXY

lemma IsModularPair.contract {C : Set Œ±} (hXY : M.IsModularPair X Y) (hCX : C ‚äÜ X) (hCY : C ‚äÜ Y) :
    (M Ôºè C).IsModularPair (X \ C) (Y \ C) :=
  hXY.contract_subset_closure (hCX.trans (M.subset_closure X)) (hCY.trans (M.subset_closure Y))



-- lemma IsFlat.isModularPair_iff_foo (hF : M.IsFlat F) (hX : M.IsFlat X) :
--     M.closure (F ‚à™ X) ‚à© Y = M.closure (X ‚à™ (F ‚à© Y))




end IsModularPair



end Matroid
