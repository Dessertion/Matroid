import Matroid.Representation.Basic

/-
We collect material on matroid invariants and closure properties of classes of matroids here.
-/

open Set

namespace Matroid

section Property

universe u

variable {Œ∑ : Type*} {P : ‚àÄ {Œ≤ : Type u}, Matroid Œ≤ ‚Üí Prop} {Œ± : Type u} {M N : Matroid Œ±}

section Invariant

/-- A matroid invariant is a parameter or property that is invariant under isomorphism. -/
class Invariant {Œ∑ : Type} (f : ‚àÄ {Œ± : Type u}, Matroid Œ± ‚Üí Œ∑) : Prop :=
  (on_iso : ‚àÄ {Œ± Œ≤ : Type u} {M : Matroid Œ±} {N : Matroid Œ≤}, M ‚âÖ N ‚Üí f M = f N)

theorem IsIso.pred_iff_pred {P : ‚àÄ {Œ∑ : Type u}, Matroid Œ∑ ‚Üí Prop} [Invariant P]
    {Œ± Œ≤ : Type u} {M : Matroid Œ±} {N : Matroid Œ≤} (hMN : M ‚âÖ N) : P M ‚Üî P N := by
  simpa using Invariant.on_iso (f := P) hMN

theorem IsIso.pred_of_pred [Invariant P] {Œ± Œ≤ : Type u} {M : Matroid Œ±} {N : Matroid Œ≤}
  (hMN : M ‚âÖ N) (hM : P M) : P N := hMN.pred_iff_pred.1 hM

-- theorem Invariant.and {P Q : ‚àÄ {Œ∑ : Type u}, Matroid Œ∑ ‚Üí Prop} (hP : Invariant P)
--     (hQ : Invariant Q) : Invariant (fun M ‚Ü¶ P M ‚àß Q M) := by
--   intro Œ± Œ≤ M N hMN
--   simp only [eq_iff_iff]
--   rw [hP.pred_iff_pred hMN, hQ.pred_iff_pred hMN]

instance invariant_finite : Invariant.{u} Matroid.Finite where
  on_iso := by intro _ _ _ _ hMN ; rw [hMN.finite_iff]

instance invariant_finiteRk : Invariant.{u} FiniteRk where
  on_iso := by intro _ _ _ _ hMN ; rw [hMN.finiteRk_iff]

instance invariant_erk : Invariant.{u} erk where
  on_iso := by intro _ _ _ _ hMN; exact hMN.erk_eq_erk

instance invariant_fieldRep {ùîΩ : Type*} [Field ùîΩ] : Invariant.{u} (FieldRep ùîΩ) where
  on_iso := by
    intro _ _ _ _ hMN; rw [fieldRep_def, fieldRep_def, hMN.representable_iff, hMN.finite_iff]

end Invariant

section Restriction

class RestrictionClosed (P : ‚àÄ {Œ± : Type u}, Matroid Œ± ‚Üí Prop) : Prop :=
  (forall_restriction : ‚àÄ {Œ± : Type u} {N M : Matroid Œ±}, N ‚â§r M ‚Üí P M ‚Üí P N)

theorem Restriction.pred_restriction [RestrictionClosed P] (hNM : N ‚â§r M) (hM : P M) : P N :=
  RestrictionClosed.forall_restriction hNM hM

end Restriction

section Minor

/-- A minor-closed matroid property -/
class MinorClosed (P : ‚àÄ {Œ± : Type u}, Matroid Œ± ‚Üí Prop) : Prop :=
  (forall_minor : ‚àÄ {Œ± : Type u} {N M : Matroid Œ±}, N ‚â§m M ‚Üí P M ‚Üí P N)

theorem Minor.pred_minor [MinorClosed P] (hNM : N ‚â§m M) (hM : P M) : P N :=
  MinorClosed.forall_minor hNM hM

instance minorClosed_finite : MinorClosed.{u} Matroid.Finite where
  forall_minor := fun a _ ‚Ü¶ Minor.finite a

instance minorClosed_finiteRk : MinorClosed.{u} FiniteRk where
  forall_minor := fun a _ ‚Ü¶ Minor.finiteRk a

instance minorClosed_finitary : MinorClosed.{u} Finitary where
  forall_minor := fun a _ ‚Ü¶ Minor.finitary a

instance minorClosed_fieldRep (ùîΩ : Type*) [Field ùîΩ] :
    MinorClosed (FieldRep ùîΩ) :=
  ‚ü®fun {_ _ _} hNM ‚ü®hMrep, hMfin‚ü© ‚Ü¶ ‚ü®hMrep.minor hNM, hNM.pred_minor hMfin‚ü©‚ü©

/-- `M` is an `ExclMinor` for property `P` if `M` is minor-minimal not satisfying `P`. -/
@[pp_dot] def ExclMinor {Œ≤ : Type u} (M : Matroid Œ≤) (P : ‚àÄ {Œ± : Type u}, Matroid Œ± ‚Üí Prop) :=
  ¬¨ P M ‚àß ‚àÄ {N}, N <m M ‚Üí P N

theorem ExclMinor.not_prop_self (h : M.ExclMinor P) : ¬¨ P M :=
  h.1

theorem ExclMinor.prop_of_strictMinor (hM : M.ExclMinor P) (hMN : N <m M) : P N :=
  hM.2 hMN

theorem ExclMinor.eq_of_not_prop_of_minor (hM : M.ExclMinor P) (hNM : N ‚â§m M) (hN : ¬¨ P N) :
    N = M := by
  obtain (hNM' | rfl) := hNM.strictMinor_or_eq
  ¬∑ exact (hN <| hM.prop_of_strictMinor hNM').elim
  rfl

theorem ExclMinor.prop_deleteElem (hM : M.ExclMinor P) (he : e ‚àà M.E) : P (M ‚ßπ e) :=
  hM.prop_of_strictMinor (deleteElem_strictMinor he)

theorem ExclMinor.prop_contractElem (hM : M.ExclMinor P) (he : e ‚àà M.E) : P (M ‚ß∏ e) :=
  hM.prop_of_strictMinor (contractElem_strictMinor he)

theorem exclMinor_iff_forall_contract_delete [MinorClosed P] {M : Matroid Œ±} :
    M.ExclMinor P ‚Üî ¬¨ P M ‚àß ‚àÄ e ‚àà M.E, P (M ‚ß∏ e) ‚àß P (M ‚ßπ e) := by
  refine ‚ü®fun h ‚Ü¶ ‚ü®h.not_prop_self, fun e he ‚Ü¶ ‚ü®h.prop_contractElem he, h.prop_deleteElem he‚ü©‚ü©,
    fun h ‚Ü¶ ‚ü®h.1, fun {N} hNM ‚Ü¶ ?_‚ü©‚ü©
  obtain ‚ü®e, he, (hc | hd)‚ü© := strictMinor_iff_minor_contract_or_delete.1 hNM
  ¬∑ exact hc.pred_minor (h.2 e he).1
  exact hd.pred_minor (h.2 e he).2

theorem pred_iff_not_exists_exclMinor_minor [MinorClosed P] (M : Matroid Œ±) [M.Finite] :
    P M ‚Üî ¬¨ ‚àÉ N, N ‚â§m M ‚àß N.ExclMinor P := by
  refine ‚ü®fun h ‚ü®N, hNM, hN‚ü© ‚Ü¶ hN.not_prop_self <| hNM.pred_minor h,
    fun h ‚Ü¶ by_contra fun hM ‚Ü¶ h ?_‚ü©
  obtain ‚ü®N, ‚ü®hNM : N ‚â§m M, hPN : ¬¨ P N ‚ü©, hmin‚ü© := Finite.exists_minimal_wrt id _
    (M.finite_setOf_minor.inter_of_left {M' | ¬¨ P M'}) ‚ü®M, Minor.refl, hM‚ü©
  refine ‚ü®N, hNM, hPN, fun {N‚ÇÄ} hlt ‚Ü¶ by_contra fun hN‚ÇÄ ‚Ü¶ ?_‚ü©
  obtain rfl := hmin N‚ÇÄ ‚ü®hlt.minor.trans hNM, hN‚ÇÄ‚ü© hlt.minor
  exact strictMinor_irrefl _ hlt

theorem exists_minimal_minor_between (P : Matroid Œ± ‚Üí Prop) [M.Finite] (hM : P M) (hNM : N ‚â§m M) :
    ‚àÉ (M‚ÇÄ : Matroid Œ±), N ‚â§m M‚ÇÄ ‚àß M‚ÇÄ ‚â§m M ‚àß ‚àÄ M‚ÇÄ', N ‚â§m M‚ÇÄ' ‚Üí M‚ÇÄ' <m M‚ÇÄ ‚Üí ¬¨ P M‚ÇÄ' := by
  obtain ‚ü®M‚ÇÄ, ‚ü®hM‚ÇÄM, -, hNM‚ÇÄ‚ü©, hmin‚ü© :=  Finite.exists_minimal_wrt id _
    (M.finite_setOf_minor.inter_of_left {M' | P M' ‚àß N ‚â§m M'}) ‚ü®M, Minor.refl, hM, hNM‚ü©
  exact ‚ü®M‚ÇÄ, hNM‚ÇÄ, hM‚ÇÄM, fun M' hM' hM'M‚ÇÄ hP ‚Ü¶ hM'M‚ÇÄ.ne.symm <|
    hmin _ ‚ü®hM'M‚ÇÄ.minor.trans hM‚ÇÄM, hP, hM'‚ü© hM'M‚ÇÄ.minor‚ü©

end Minor

section Dual

/-- A self-dual matroid parameter -/
def SelfDual (P : ‚àÄ {Œ± : Type u}, Matroid Œ± ‚Üí Œ∑) : Prop :=
  ‚àÄ {Œ± : Type u} (M : Matroid Œ±), P M = P M‚ú∂

/-- A matroid property that is preserved under taking duals. -/
class DualClosed (P : ‚àÄ {Œ± : Type u}, Matroid Œ± ‚Üí Prop) : Prop :=
  (forall_dual : ‚àÄ {Œ± : Type u} {M : Matroid Œ±}, P M ‚Üí P M‚ú∂)

theorem toDualPred [DualClosed P] (hM : P M) : P M‚ú∂ :=
  DualClosed.forall_dual hM

theorem ofDualPred [DualClosed P] (hM : P M‚ú∂) : P M :=
  M.dual_dual ‚ñ∏ toDualPred hM

@[simp] theorem iffDualPred [DualClosed P] : P M‚ú∂ ‚Üî P M :=
  ‚ü®ofDualPred, toDualPred‚ü©

/-- The class of finite matroids is closed under duality -/
instance dualClosed_finite : DualClosed.{u} Matroid.Finite where
  forall_dual := fun a ‚Ü¶ by infer_instance

/-- The class of finite `ùîΩ`-representable matroids is closed under duality -/
instance dualClosed_fieldRep (ùîΩ : Type*) [Field ùîΩ] : DualClosed.{u} (FieldRep ùîΩ) where
  forall_dual := fun {_ _} ‚ü®hMrep, hMfin‚ü© ‚Ü¶ ‚ü®hMrep.dual, by infer_instance‚ü©

theorem ExclMinor.toDual [DualClosed P] (h : M.ExclMinor P) : M‚ú∂.ExclMinor P :=
  ‚ü®fun h' ‚Ü¶ h.1 <| ofDualPred h',
    fun {_} hNM ‚Ü¶ ofDualPred (h.prop_of_strictMinor <| strictMinor_dual_iff_dual_strictMinor.1 hNM)‚ü©

end Dual


section Finite

/-- The property of a matroid class that all its members are finite -/
class FinClass (P : ‚àÄ {Œ≤ : Type u}, Matroid Œ≤ ‚Üí Prop) : Prop where
  (forall_fin : ‚àÄ {Œ± : Type u} {M : Matroid Œ±}, P M ‚Üí M.Finite)

theorem finite_of_pred [FinClass P] (hM : P M) : M.Finite :=
    FinClass.forall_fin hM

instance fieldRep_finClass (ùîΩ : Type*) [Field ùîΩ] : FinClass.{u} (FieldRep ùîΩ) where
  forall_fin := fun h ‚Ü¶ h.2

instance finite_finClass : FinClass.{u} Matroid.Finite where
  forall_fin := id

theorem ExclMinor.finite [FinClass P] (hM : M.ExclMinor P) : M.Finite := by
  obtain (rfl | ‚ü®‚ü®e,he‚ü©‚ü© ) := eq_emptyOn_or_nonempty M
  ¬∑ infer_instance
  have := finite_of_pred <| hM.prop_deleteElem he
  exact ‚ü®((M ‚ßπ e).ground_finite.insert e).subset (by simp)‚ü©

section Finite


section Loops

/-- A matroid property `P` is `DeleteLoopClosed` if it is unchanged by deleting/adding a single
  loop. This is not the same as stating -/
class DeleteLoopClosed (P : ‚àÄ {Œ≤ : Type u}, Matroid Œ≤ ‚Üí Prop) : Prop :=
  (iff_deleteLoop : ‚àÄ {Œ± : Type u} {M : Matroid Œ±} {e : Œ±}, M.Loop e ‚Üí (P (M ‚ßπ e) ‚Üî P M))

theorem pred_delete_loop_iff [DeleteLoopClosed P] {M : Matroid Œ±} (he : M.Loop e) :
    P (M ‚ßπ e) ‚Üî P M :=
  DeleteLoopClosed.iff_deleteLoop he

theorem ExclMinor.loopless [DeleteLoopClosed P] [MinorClosed P] (hM : M.ExclMinor P) :
    M.Loopless := by
  rw [loopless_iff_forall_not_loop]
  intro e heE he
  rw [exclMinor_iff_forall_contract_delete, ‚Üê pred_delete_loop_iff he (P := P)] at hM
  exact hM.1 (hM.2 e heE).2

@[simp] theorem pred_removeLoops_iff [DeleteLoopClosed P] {M : Matroid Œ±} [M.Finite] :
    P M.removeLoops ‚Üî P M := by
  set S := (M.cl ‚àÖ).powerset ‚à© {X : Set Œ± | (P M ‚Üî P (M ‚ßπ X))}
  have hfin : S.Finite
  ¬∑ exact (M.ground_finite.subset (M.cl_subset_ground ‚àÖ)).finite_subsets.inter_of_left _
  obtain ‚ü®X, ‚ü®hXss : _ ‚äÜ M.cl ‚àÖ, hPX : P M ‚Üî P (M ‚ßπ X)‚ü©, hX‚ü© :=
    Finite.exists_maximal_wrt id S hfin ‚ü®‚àÖ, by simp‚ü©
  obtain (hss | rfl) := hXss.ssubset_or_eq
  ¬∑ obtain ‚ü®e, heX, hel‚ü© := exists_of_ssubset hss
    refine (hel <|
      (hX (insert e X) ‚ü®insert_subset heX hXss, ?_‚ü© (by simp)).symm.subset (mem_insert _ _)).elim
    rw [mem_setOf_eq, hPX, ‚Üê union_singleton, ‚Üê delete_delete, ‚Üê deleteElem,
      pred_delete_loop_iff (P := P)]
    rwa [delete_loop_iff, and_iff_left hel]
  rw [hPX, removeLoops_eq_delete]

/-- A matroid property `P` is `RemoveLoopClosed` if `P M ‚Üî P M.removeLoops` for all `M`.
  This property cannot hold for classes whose members are all finite, so is not so useful. -/
class RemoveLoopsClosed (P : ‚àÄ {Œ≤ : Type u}, Matroid Œ≤ ‚Üí Prop) : Prop :=
  /- `P` holds for `M` iff it holds after removing loops. -/
  (iff_removeLoops : ‚àÄ {Œ± : Type u} {M : Matroid Œ±}, P M ‚Üî P M.removeLoops)

@[simp] theorem pred_removeLoops_iff' [RemoveLoopsClosed P] {M : Matroid Œ±} :
    P M.removeLoops ‚Üî P M :=
  RemoveLoopsClosed.iff_removeLoops.symm

end Loops

section Simple

/-- Property `P` is unchanged by deleting loops and parallel copies. This is weaker than
  being closed under simplification, because simplification may remove an infinite set. -/
class DeleteParallelClosed (P : ‚àÄ {Œ≤ : Type u}, Matroid Œ≤ ‚Üí Prop) extends DeleteLoopClosed P :=
  (iff_delete_parallel :
    ‚àÄ {Œ± : Type u} {M : Matroid Œ±} {e f : Œ±}, M.Parallel e f ‚Üí e ‚â† f ‚Üí (P (M ‚ßπ e) ‚Üî P M))

-- instance DeleteParallelClosed.deleteLoopClosed [DeleteParallelClosed P] : DeleteLoopClosed P where
--   iff_deleteLoop := fun {_ _} ‚Ü¶ iff_delete_loop

theorem pred_delete_parallel_iff [DeleteParallelClosed P] {M : Matroid Œ±} (hef : M.Parallel e f)
  (hne : e ‚â† f) : P (M ‚ßπ e) ‚Üî P M :=
  DeleteParallelClosed.iff_delete_parallel hef hne

@[simp] theorem pred_simplification_iff (P : ‚àÄ {Œ≤ : Type u}, Matroid Œ≤ ‚Üí Prop)
    [DeleteParallelClosed P] {M : Matroid Œ±} [M.Finite] : P M.simplification ‚Üî P M := by
  set S := {N | M.simplification ‚â§r N ‚àß (P M ‚Üî P N)}
  have := M.finite_setOf_restriction.inter_of_right S
  obtain ‚ü®(N : Matroid Œ±), ‚ü®‚ü®hNs, hNP‚ü©,hNM : N ‚â§r M‚ü©,hmin‚ü© := Finite.exists_minimal_wrt
    (Œ± := Matroid Œ±) (Œ≤ := Matroid·µ£ Œ±) id _
    (M.finite_setOf_restriction.inter_of_right {N | M.simplification ‚â§r N ‚àß (P M ‚Üî P N)})
    ‚ü®M, ‚ü®M.simplification_restriction,Iff.rfl‚ü©, Restriction.refl‚ü©
  obtain (rfl | hNs) := hNs.eq_or_strictRestriction
  ¬∑ rwa [Iff.comm]
  obtain (‚ü®e,he‚ü© | ‚ü®e,f,hef,he,hf‚ü©) :=
    exists_loop_or_parallel_of_simplification_strictRestriction hNs hNM
  ¬∑ rw  [‚Üê pred_delete_loop_iff (P := P) he] at hNP
    have hesi : e ‚àâ M.simplification.E :=
      fun he' ‚Ü¶ M.simplification.not_loop e <| he.loop_restriction hNs.restriction he'
    rw [show N = N ‚ßπ e from hmin (N ‚ßπ e) ‚ü®‚ü®hNs.restriction.restriction_deleteElem hesi,hNP‚ü©,
      (delete_restriction _ _).trans hNM‚ü© (delete_restriction _ _)] at he
    simp at he
  rw [‚Üê pred_delete_parallel_iff (P := P) hef (fun h ‚Ü¶ he <| h ‚ñ∏ hf)] at hNP
  rw [show N = N ‚ßπ e from hmin (N ‚ßπ e)
    ‚ü®‚ü®hNs.restriction.restriction_deleteElem he,hNP‚ü©, (delete_restriction _ _).trans hNM‚ü©
    (delete_restriction _ _)] at hef
  exact (hef.nonloop_left.mem_ground.2 rfl).elim





-- /-- A matroid property `P` is `SimpClosed` if it is unchanged by parallel extensions.
--   This is different from being closed under simplification (for instance, the property
--   of being finite is closed under the former but not the latter), but is the same in
--   a finite setting. -/
-- class SimpClosed (P : ‚àÄ {Œ± : Type u}, Matroid Œ± ‚Üí Prop) : Prop :=
--   (iff_parallel_extend : ‚àÄ {Œ≤ : Type u} {M : Matroid Œ≤} {e f : Œ≤}
--     M.Parallel
--     P (M.parallelExtend e f) ‚Üî P M )



/-- A matroid property `P` is `SimpClosed` if `P M ‚Üî P M.simplification` for all `M`. -/
class SimpClosed (P : ‚àÄ {Œ± : Type u}, Matroid Œ± ‚Üí Prop) : Prop :=
  /- `P` holds for `M` iff it holds after simplifying. -/
  (iff_simp : ‚àÄ {Œ≤ : Type u} {M : Matroid Œ≤}, P M ‚Üî P M.simplification)

@[simp] theorem pred_simplification_iff' (P : ‚àÄ {Œ≤ : Type u}, Matroid Œ≤ ‚Üí Prop) [SimpClosed P] :
    P M.simplification ‚Üî P M :=
  SimpClosed.iff_simp.symm

-- instance removeLoopClosed_of_simpClosed (P : ‚àÄ {Œ≤ : Type u}, Matroid Œ≤ ‚Üí Prop) [SimpClosed P] :
--     RemoveLoopClosed P where
--   iff_removeLoops := fun {Œ±} M ‚Ü¶ by
--     rw [‚Üê pred_simplification_iff P, Iff.comm, ‚Üê pred_simplification_iff P,
--       removeLoops_simplification_eq]

-- instance fieldRep.simpClosed {ùîΩ : Type*} [Field ùîΩ] : SimpClosed.{u} (FieldRep ùîΩ) := by
--   refine ‚ü®fun {Œ± M} ‚Ü¶ ‚ü®fun ‚ü®h1,h2‚ü© ‚Ü¶ ?_, fun ‚ü®h1,h2‚ü© ‚Ü¶ ?_‚ü©‚ü©
--   sorry
--   sorry

-- theorem ExclMinor.simple [SimpClosed P] [MinorClosed P] (hM : M.ExclMinor P) : M.Simple := by
--   rw [‚Üê simplification_eq_self_iff]
--   apply hM.eq_of_not_prop_of_minor (simplification_restriction M).minor
--   simp_rw [pred_simplification_iff]
--   exact hM.not_prop_self

-- theorem ExclMinor.dual_simple [SimpClosed P] [MinorClosed P] [DualClosed P] (hM : M.ExclMinor P) :
--     M‚ú∂.Simple :=
--   hM.toDual.simple

end Simple

-- example (hM : M.ExclMinor (FieldRep (ZMod 2))) : M.Simple ‚àß M‚ú∂.Simple ‚àß M.Finite := by
--   constructor
--   ¬∑ have := hM.simple
