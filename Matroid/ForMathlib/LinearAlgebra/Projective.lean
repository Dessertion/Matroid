import Mathlib.LinearAlgebra.Projectivization.Independence
import Mathlib.LinearAlgebra.Projectivization.Subspace
import Matroid.ForMathlib.LinearAlgebra.LinearIndependent
import Matroid.ForMathlib.LinearAlgebra.Submodule

variable {Œπ K V : Type*} [DivisionRing K] [AddCommGroup V] [Module K V]

open Set Function Projectivization

namespace Projectivization

lemma linearIndependent_iff (f : Œπ ‚Üí V) (hf0 : ‚àÄ i, f i ‚â† 0) :
    LinearIndependent K f ‚Üî Independent (fun i ‚Ü¶ mk K (f i) (hf0 i)) := by
  rw [independent_iff]
  choose c hc using fun i ‚Ü¶ exists_smul_eq_mk_rep K (f i) (hf0 i)
  convert LinearIndependent.units_smul_iff (w := fun i ‚Ü¶ (c i)‚Åª¬π)
  ext i
  simp [‚Üê hc]

@[simp]
theorem independent_subsingleton [Subsingleton Œπ] (f : Œπ ‚Üí Projectivization K V) :
    Independent f := by
  simp [independent_iff, rep_nonzero]

lemma independent_equiv {Œπ' : Type*} (e : Œπ ‚âÉ Œπ') {f : Œπ' ‚Üí Projectivization K V} :
    Independent (f ‚àò e) ‚Üî Independent f := by
  rw [independent_iff (f := f), ‚Üê linearIndependent_equiv e, independent_iff, comp_assoc]

@[simp]
lemma mk_smul_eq {u : V} (hu : u ‚â† 0) (c : KÀ£) :
    mk K (c ‚Ä¢ u) (by rwa [smul_ne_zero_iff_ne]) = Projectivization.mk K u hu :=
  (mk_eq_mk_iff ..).2 ‚ü®c, rfl‚ü©

lemma mk_smul_eq' {u : V} (hu : u ‚â† 0) {c : K} (hc : c ‚â† 0) :
    mk K (c ‚Ä¢ u) (by simp [hc, hu]) = Projectivization.mk K u hu :=
  (mk_eq_mk_iff' ..).2 ‚ü®c, rfl‚ü©

lemma exists_smul_mk_rep_eq (K : Type*) {V : Type*} [DivisionRing K] [AddCommGroup V]
    [Module K V] (v : V) (hv : v ‚â† 0) : ‚àÉ c : KÀ£, c ‚Ä¢ (mk K v hv).rep = v := by
  obtain ‚ü®c, hc‚ü© := exists_smul_eq_mk_rep K v hv
  exact ‚ü®c‚Åª¬π, by simp [‚Üê hc]‚ü©

lemma mem_submodule_iff (K : Type*) {V : Type*} [DivisionRing K] [AddCommGroup V]
    [Module K V] {v : V} {w : Projectivization K V} (hv : v ‚â† 0) :
    v ‚àà w.submodule ‚Üî mk K v hv = w := by
  obtain ‚ü®a, ha‚ü© := exists_smul_eq_mk_rep K v hv
  rw [w.submodule_eq, Submodule.mem_span_singleton‚ÇÄ hv, ‚Üê mk_eq_mk_iff _ _ _ hv w.rep_nonzero,
    mk_rep]

@[simp]
lemma _root_.Submodule.mk_rep_mem_iff_mem (K : Type*) {V : Type*} [DivisionRing K] [AddCommGroup V]
    [Module K V] {W : Submodule K V} {v : V} (hv : v ‚â† 0) :
    (mk K v hv).rep ‚àà W ‚Üî v ‚àà W := by
   obtain ‚ü®c, hc‚ü© := exists_smul_eq_mk_rep K v hv
   rw [‚Üê hc, Submodule.smul_mem_iff']

@[simp]
lemma independent_pair {u v : Projectivization K V} :
    Independent (fun x : ({u,v} : Set _) ‚Ü¶ x.1) := by
  rw [independent_iff]
  obtain rfl | hne := eq_or_ne u v
  ¬∑ simp [u.rep_nonzero]
  refine (linearIndependent_restrict_pair_iff (V := V) (K := K) (fun x ‚Ü¶ x.rep) hne
    (rep_nonzero u)).2 fun c hc ‚Ü¶ hne ?_
  have hc0 : c ‚â† 0 := by rintro rfl; simpa [v.rep_nonzero] using hc.symm
  simpa [‚Üê hc, mk_smul_eq' u.rep_nonzero hc0] using v.mk_rep

@[simp] lemma submodule_span_range_rep (ùîΩ W : Type*) [DivisionRing ùîΩ] [AddCommGroup W]
    [Module ùîΩ W] : Submodule.span ùîΩ (range (Projectivization.rep (K := ùîΩ) (V := W))) = ‚ä§ := by
  have b := Basis.ofVectorSpace ùîΩ W
  ext x
  simp only [Submodule.mem_top, iff_true]
  refine mem_of_mem_of_subset (b.mem_span x) (Submodule.span_le.2 ?_)
  rintro _ ‚ü®i, rfl‚ü©
  have hi0 := b.ne_zero i
  have hmem : b i ‚àà Submodule.span ùîΩ {(mk (K := ùîΩ) (V := W) (b i) hi0).rep} := by
    rw [Submodule.mem_span_singleton‚ÇÄ (b.ne_zero i), ‚Üê mk_eq_mk_iff _ _ _ hi0]
    ¬∑ simp only [mk_rep]
    exact rep_nonzero (mk ùîΩ (b i) hi0)
  exact mem_of_mem_of_subset hmem <| Submodule.span_mono <| by simp


variable {Œπ K V : Type*} [Field K] [AddCommGroup V] [Module K V]

lemma Subspace.mem_span_iff_rep (K : Type*) {V : Type*} [Field K] [AddCommGroup V]
    [Module K V] (s : Set (Projectivization K V)) (b : Projectivization K V) :
    b ‚àà Subspace.span s ‚Üî b.rep ‚àà Submodule.span K (Projectivization.rep '' s) := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ induction' h with x hxs x‚ÇÅ x‚ÇÇ hx‚ÇÅ0 hx‚ÇÇ0 hx‚ÇÅx‚ÇÇ hx‚ÇÅ hx‚ÇÇ hx‚ÇÅ' hx‚ÇÇ'
    ¬∑ exact mem_of_mem_of_subset (mem_image_of_mem _ hxs) Submodule.subset_span
    simp only [Submodule.mk_rep_mem_iff_mem] at hx‚ÇÅ' hx‚ÇÇ' ‚ä¢
    exact Submodule.add_mem _ hx‚ÇÅ' hx‚ÇÇ'
  suffices aux : ‚àÄ ‚¶Éa‚¶Ñ (hasp : a ‚àà Submodule.span K (Projectivization.rep '' s)) (ha : a ‚â† 0),
      Projectivization.mk K a ha ‚àà Subspace.span s by
    simpa using aux h b.rep_nonzero
  refine fun a ‚Ü¶ Submodule.span_induction
    (p := fun a ha ‚Ü¶ ‚àÄ ha0, Projectivization.mk K a ha0 ‚àà Subspace.span s) ?_ (by simp) ?_ ?_
  ¬∑ simpa [rep_nonzero] using fun _ h ‚Ü¶ Subspace.subset_span _ h
  ¬∑ intro x y hx hy hx' hy' hxy
    obtain rfl | hx0 := eq_or_ne x 0
    ¬∑ simpa using hy' (by simpa using hxy)
    obtain rfl | hy0 := eq_or_ne y 0
    ¬∑ simpa using hx' (by simpa using hxy)
    refine (Subspace.span s).mem_add _ _ hx0 hy0 hxy (hx' hx0) (hy' hy0)
  intro a x hx hx' ha0
  simp only [ne_eq, smul_eq_zero, not_or] at ha0
  simpa [mk_smul_eq' ha0.2 ha0.1] using hx' ha0.2

lemma Subspace.mem_span_image_rep_iff (K : Type*) {V : Type*} [Field K] [AddCommGroup V]
    [Module K V] (s : Set (Projectivization K V)) {a : V} (ha : a ‚â† 0) :
    a ‚àà Submodule.span K (Projectivization.rep '' s) ‚Üî Projectivization.mk K a ha ‚àà span s := by
  simp [Subspace.mem_span_iff_rep]

--x ‚àà span ((fun a ‚Ü¶ Projectivization.mk ùîΩ (v a) ‚ãØ) '' X) ‚Üî x.rep ‚àà Submodule.span ùîΩ (‚áëv '' X)

lemma Subspace.rep_mem_span_image_iff (K : Type*) {V Œπ : Type*} [Field K] [AddCommGroup V]
    [Module K V] {f : Œπ ‚Üí Projectivization K V} (s : Set Œπ) {x : Projectivization K V} :
    x.rep ‚àà Submodule.span K ((Projectivization.rep ‚àò f) '' s) ‚Üî x ‚àà span (f '' s) := by
  rw [image_comp, ‚Üê Subspace.mem_span_iff_rep]

lemma Subspace.mem_span_image_iff (K : Type*) {V Œπ : Type*} [Field K] [AddCommGroup V]
    [Module K V] {f : Œπ ‚Üí V} {hf : ‚àÄ i, f i ‚â† 0} (s : Set Œπ) {x : Projectivization K V} :
    x ‚àà span ((fun i ‚Ü¶ Projectivization.mk K (f i) (hf i)) '' s) ‚Üî
      x.rep ‚àà Submodule.span K (f '' s) := by
  simp_rw [‚Üê Subspace.rep_mem_span_image_iff, comp_apply]
  convert Iff.rfl using 2
  simp only [le_antisymm_iff, Submodule.span_le, subset_def, mem_image, SetLike.mem_coe,
    forall_exists_index, and_imp, forall_apply_eq_imp_iff‚ÇÇ, Submodule.mk_rep_mem_iff_mem]
  refine ‚ü®fun a has ‚Ü¶ ?_, fun a has ‚Ü¶ ?_‚ü©
  ¬∑ have hmem : f a ‚àà Submodule.span K {(Projectivization.mk K (f a) (hf a)).rep} := by
      rw [‚Üê submodule_eq, submodule_mk]
      exact Submodule.mem_span_singleton_self (f a)
    refine mem_of_mem_of_subset hmem (Submodule.span_mono ?_)
    simp only [singleton_subset_iff, mem_image]
    exact ‚ü®a, has, rfl‚ü©
  exact mem_of_mem_of_subset (mem_image_of_mem f has) Submodule.subset_span

/-- The projective subspace corresponding to a given submodule -/
def _root_.Submodule.toProjSubspace (W : Submodule K V) : Subspace K V where
  carrier := Projectivization.rep ‚Åª¬π' W
  mem_add' := by
    intro v w hv hw hvw hv' hw'
    simp only [mem_preimage, SetLike.mem_coe, Submodule.mk_rep_mem_iff_mem] at hv' hw' ‚ä¢
    exact Submodule.add_mem _ hv' hw'

@[simp]
lemma Submodule.mem_toProjSubspace_iff (W : Submodule K V) (x : Projectivization K V) :
    x ‚àà W.toProjSubspace ‚Üî x.rep ‚àà W := Iff.rfl

lemma Submodule.toProjSubspace_span_image_eq (K : Type*) {V Œπ : Type*} [Field K] [AddCommGroup V]
    [Module K V] {f : Œπ ‚Üí V} {hf : ‚àÄ i, f i ‚â† 0} (s : Set Œπ) :
    (Submodule.span K (f '' s)).toProjSubspace =
    Subspace.span ((fun i ‚Ü¶ Projectivization.mk K (f i) (hf i)) '' s) := by
  ext x
  exact (Subspace.mem_span_image_iff ..).symm

def Subspace.toSubmodule (W : Subspace K V) :=
  Submodule.span K (Projectivization.rep '' (W : Set (Projectivization K V)))

/-- The submodule corresponding to a given projective subspace -/
lemma Subspace.toSubmodule_coeSet_eq (W : Subspace K V) :
   (W.toSubmodule : Set V) = insert 0 (‚ãÉ x ‚àà W, Projectivization.submodule x) := by
  ext v
  obtain (rfl | hne) := eq_or_ne v 0
  ¬∑ simp
  simp only [Subspace.toSubmodule, SetLike.mem_coe, Subspace.mem_span_image_rep_iff _ _ hne,
    Subspace.span_coe, mem_insert_iff, hne, mem_iUnion, exists_prop, false_or]
  exact ‚ü®fun h ‚Ü¶ ‚ü®_, h,by simp [Submodule.mem_span_singleton_self]‚ü©,
    fun ‚ü®e, heW, hve‚ü© ‚Ü¶ by rwa [(mem_submodule_iff _ hne).1 hve] ‚ü©

lemma Subspace.mem_toSubmodule_iff (W : Subspace K V) (x : V) :
    x ‚àà W.toSubmodule ‚Üî x = 0 ‚à® ‚àÉ hx : x ‚â† 0, Projectivization.mk K x hx ‚àà W := by
  obtain rfl | hne := eq_or_ne x 0
  ¬∑ simp
  rw [‚Üê SetLike.mem_coe, toSubmodule_coeSet_eq]
  simp [mem_submodule_iff _ hne, hne]

lemma Subspace.toSubmodule_eq_span (W : Subspace K V) : W.toSubmodule
    = Submodule.span K (Projectivization.rep '' (W : Set (Projectivization K V))) := by
  ext x
  obtain rfl | hne := eq_or_ne x 0
  ¬∑ simp
  simp [hne, mem_span_image_rep_iff _ _ hne, Subspace.mem_toSubmodule_iff]

@[simp] lemma toProjSubspace_toSubmodule (W : Submodule K V) :
    W.toProjSubspace.toSubmodule = W := by
  ext e
  by_cases he : e = 0 <;>
  simp [Subspace.mem_toSubmodule_iff, he]

@[simp] lemma toSubmodule_toProjSubspace (W : Subspace K V) :
    W.toSubmodule.toProjSubspace = W := by
  ext
  simp [Subspace.mem_toSubmodule_iff, rep_nonzero]

/-- There is an order-preserving isomorphism between projective subspaces and submodules. -/
@[simps]
def Subspace.orderIso_submodule (K V : Type*) [Field K] [AddCommGroup V] [Module K V] :
    (Subspace K V) ‚âÉo (Submodule K V) where
  toFun := Subspace.toSubmodule
  invFun := Submodule.toProjSubspace
  left_inv := toSubmodule_toProjSubspace
  right_inv := toProjSubspace_toSubmodule
  map_rel_iff' := by
    intro X‚ÇÅ X‚ÇÇ
    simp only [Equiv.coe_fn_mk, SetLike.le_def, Subspace.mem_toSubmodule_iff, ne_eq, true_and,
      forall_eq_or_imp, not_true_eq_false, IsEmpty.exists_iff, or_false, forall_exists_index]
    exact ‚ü®fun h x hx‚ÇÅ ‚Ü¶ by simpa [x.rep_nonzero, hx‚ÇÅ] using h x.rep,
      fun h v hv hvX‚ÇÅ ‚Ü¶ .inr ‚ü®hv, h hvX‚ÇÅ‚ü©‚ü©

lemma Submodule.span_toProjSubspace (K : Type*) {V : Type*} [Field K] [AddCommGroup V] [Module K V]
    (s : Set V) : (Submodule.span K s).toProjSubspace =
      Subspace.span (range (fun x : ‚Ü•(s \ {0}) ‚Ü¶ Projectivization.mk K x.1 x.2.2)) := by
  ext e
  simp only [Subspace.mem_carrier_iff, mem_toProjSubspace_iff, Subspace.mem_span_iff_rep]
  convert Iff.rfl using 2
  simp only [le_antisymm_iff, Submodule.span_le, subset_def, mem_image, mem_range, Subtype.exists,
    mem_diff, mem_singleton_iff, SetLike.mem_coe, forall_exists_index, and_imp]
  constructor
  ¬∑ rintro x e y ‚ü®hys, hy0‚ü© rfl rfl
    simp only [Submodule.mk_rep_mem_iff_mem]
    exact Submodule.subset_span hys
  intro x hxs
  obtain rfl | hne := eq_or_ne x 0
  ¬∑ simp
  simp_rw [Subspace.mem_span_image_rep_iff _ _ hne]
  exact Subspace.subset_span _ <| mem_range.2 ‚ü®‚ü®x, hxs, hne‚ü©, rfl‚ü©

lemma Subspace.span_toSubmodule (K : Type*) {V : Type*} [Field K] [AddCommGroup V] [Module K V]
    (s : Set (Projectivization K V)) :
    (span s).toSubmodule = Submodule.span K (Projectivization.rep '' s) := by
  refine (Submodule.span_eq_of_le _ ?_ ?_).symm
  ¬∑ suffices ‚àÄ a ‚àà s, a ‚àà span s by simpa [Subspace.mem_toSubmodule_iff, subset_def, rep_nonzero]
    exact fun a has ‚Ü¶ subset_span _ has
  simp only [SetLike.le_def, mem_toSubmodule_iff, ne_eq, forall_eq_or_imp, Submodule.zero_mem,
    forall_exists_index, true_and]
  intro a ha hasp
  rwa [mem_span_image_rep_iff _ _ ha]
