import Mathlib.Topology.Algebra.InfiniteSum.Basic
import Mathlib.Data.ENat.Basic
import Mathlib.Data.Nat.PartENat
import Mathlib.Topology.Order.Basic
import Mathlib.Data.Set.Card
import Mathlib.Topology.Instances.ENNReal
import Mathlib.Topology.Instances.Discrete


open Set WithTop Filter

universe u v

open scoped BigOperators ENNReal Topology Filter

theorem tsum_support_eq {Œ± Œ≤ : Type _} {f : Œ± ‚Üí Œ≤} [TopologicalSpace Œ≤] [AddCommMonoid Œ≤] 
    [T2Space Œ≤] : ‚àë' (x : f.support), f x = ‚àë' x, f x := by 
  simp [tsum_subtype]

theorem tsum_subtype_eq_tsum_subtype {Œ± Œ≤ : Type _} {f : Œ± ‚Üí Œ≤} [TopologicalSpace Œ≤] 
    [AddCommMonoid Œ≤] [T2Space Œ≤] {s t : Set Œ±} (h : s ‚à© f.support = t ‚à© f.support) : 
    ‚àë' (x : s), f x = ‚àë' (x : t), f x := by 
  classical
  set f' : Œ± ‚Üí Œ≤ := fun a ‚Ü¶ if a ‚àà s ‚à™ t then f a else 0 with hf'
  have : f'.support ‚äÜ s ‚à© t
  ¬∑ rintro x hx
    simp only [Function.mem_support, ne_eq, ite_eq_right_iff, not_forall, exists_prop] at hx 
    
    -- exact hx.1
    

  rw [tsum_congr (show ‚àÄ (a : s), f a = f' a from sorry), 
    tsum_congr (show ‚àÄ (a : t), f a = f' a from sorry), tsum_subtype_eq_of_support_subset, 
    tsum_subtype_eq_of_support_subset]  
  
  

  
  



namespace ENat

variable {n : ‚Ñï‚àû} {s : Set ‚Ñï‚àû}

section basic

@[simp] theorem range_coe' : range ((‚Üë) : ‚Ñï ‚Üí ‚Ñï‚àû) = Iio ‚ä§ :=
  WithTop.range_coe 

end basic 

instance : TopologicalSpace ‚Ñï‚àû := Preorder.topology ‚Ñï‚àû

instance : OrderTopology ‚Ñï‚àû := ‚ü®rfl‚ü©  

instance : T5Space ‚Ñï‚àû := inferInstance 

theorem embedding_coe : Embedding ((‚Üë) : ‚Ñï ‚Üí ‚Ñï‚àû) :=
  Nat.strictMono_cast.embedding_of_ordConnected <| by rw [range_coe']; exact ordConnected_Iio

theorem openEmbedding_coe : OpenEmbedding ((‚Üë) : ‚Ñï ‚Üí ‚Ñï‚àû) :=
  ‚ü®embedding_coe, range_coe' ‚ñ∏ isOpen_Iio‚ü© 

@[simp] theorem isOpen_image_coe (s : Set ‚Ñï) : IsOpen (((‚Üë) : ‚Ñï ‚Üí ‚Ñï‚àû) '' s) := by 
  rw [‚ÜêopenEmbedding_coe.open_iff_image_open]; exact trivial

theorem isOpen_singleton {x : ‚Ñï‚àû} (hx : x ‚â† ‚ä§) : IsOpen {x} := by
  lift x to ‚Ñï using hx
  rw [‚Üêimage_singleton, ‚ÜêopenEmbedding_coe.open_iff_image_open]
  exact trivial

@[simp] theorem isOpen_coe_singleton (n : ‚Ñï) : IsOpen {(n : ‚Ñï‚àû)} := 
  isOpen_singleton (coe_ne_top n)

theorem isOpen_of_top_not_mem {s : Set ‚Ñï‚àû} (h : ‚ä§ ‚àâ s) : IsOpen s := by 
  convert isOpen_image_coe ((‚Üë) ‚Åª¬π' s)
  simp_rw [eq_comm (a := s), image_preimage_eq_iff, range_coe', Iio, lt_top_iff_ne_top, 
    ‚Üê compl_singleton_eq, subset_compl_singleton_iff] 
  assumption 
  
theorem mem_nhds_iff {x : ‚Ñï‚àû} {s : Set ‚Ñï‚àû} (hx : x ‚â† ‚ä§) : s ‚àà ùìù x ‚Üî x ‚àà s := by 
  rw [_root_.mem_nhds_iff]
  exact ‚ü®fun ‚ü®_, h, _, h'‚ü© ‚Ü¶ h h', fun h ‚Ü¶ ‚ü®_, singleton_subset_iff.2 h, isOpen_singleton hx, rfl‚ü©‚ü©

@[simp] theorem mem_nhds_coe_iff (n : ‚Ñï) : s ‚àà ùìù (n : ‚Ñï‚àû) ‚Üî (n : ‚Ñï‚àû) ‚àà s :=
  mem_nhds_iff (coe_ne_top _)

@[simp] theorem nhds_coe_eq (n : ‚Ñï) : ùìù (n : ‚Ñï‚àû) = ùìü ({(n : ‚Ñï‚àû)}) := by 
  ext; simp

theorem nhds_eq (hn : n ‚â† ‚ä§) : ùìù n = ùìü {n} := by 
  lift n to ‚Ñï using hn; simp

@[simp] theorem nhds_top : ùìù (‚ä§ : ‚Ñï‚àû) = ‚®Ö (a) (_ : a ‚â† ‚ä§), ùìü (Ioi a) := by 
  simp_rw [nhds_top_order, Ioi, lt_top_iff_ne_top]

theorem nhds_cast_cast {m n : ‚Ñï} :
    ùìù ((Nat.cast m : ‚Ñï‚àû), (Nat.cast n : ‚Ñï‚àû)) = (ùìù (m, n)).map fun p : ‚Ñï √ó ‚Ñï ‚Ü¶ (‚Üëp.1, ‚Üëp.2) :=
  ((openEmbedding_coe.prod openEmbedding_coe).map_nhds_eq (m, n)).symm

@[norm_cast]
theorem tendsto_coe {f : Filter Œ±} {m : Œ± ‚Üí ‚Ñï} {a : ‚Ñï} :
    Tendsto (fun a ‚Ü¶ (m a : ‚Ñï‚àû)) f (ùìù ‚Üëa) ‚Üî Tendsto m f (ùìù a) :=
  embedding_coe.tendsto_nhds_iff.symm

instance : ContinuousAdd ‚Ñï‚àû := by 
  refine' ‚ü®continuous_iff_continuousAt.2 _‚ü©
  rintro ‚ü®_ | a, b‚ü©
  ¬∑ exact tendsto_nhds_top_mono' continuousAt_fst fun p ‚Ü¶ le_add_right le_rfl
  rcases b with (_ | b)
  ¬∑ exact tendsto_nhds_top_mono' continuousAt_snd fun p ‚Ü¶ le_add_left le_rfl
  simp only [ContinuousAt, WithTop.some_eq_coe, ENat.some_eq_coe]
  rw [nhds_cast_cast]
  simp_rw [tendsto_map'_iff, (¬∑ ‚àò ¬∑), ‚ÜêNat.cast_add, tendsto_coe, tendsto_add]
    
section tsum

variable {f g : Œ± ‚Üí ‚Ñï‚àû}

protected theorem hasSum : HasSum f (‚®Ü s : Finset Œ±, ‚àë a in s, f a) :=
  tendsto_atTop_iSup fun _ _ ‚Ü¶ Finset.sum_le_sum_of_subset
  
protected theorem summable : Summable f := 
  ‚ü®_, ENat.hasSum‚ü© 

@[norm_cast]
protected theorem hasSum_coe {f : Œ± ‚Üí ‚Ñï} {r : ‚Ñï} :
    HasSum (fun a ‚Ü¶ (f a : ‚Ñï‚àû)) ‚Üër ‚Üî HasSum f r := by
  simp_rw [HasSum, ‚Üê Nat.cast_sum, tendsto_coe]

protected theorem tsum_coe_eq {f : Œ± ‚Üí ‚Ñï} (h : HasSum f r) : (‚àë' a, (f a : ‚Ñï‚àû)) = r :=
  (ENat.hasSum_coe.2 h).tsum_eq

protected theorem coe_tsum {f : Œ± ‚Üí ‚Ñï} : Summable f ‚Üí ‚Üë(tsum f) = ‚àë' a, (f a : ‚Ñï‚àû)
  | ‚ü®r, hr‚ü© => by rw [hr.tsum_eq, ENat.tsum_coe_eq hr]

protected theorem tsum_coe_ne_top_iff_summable {f : Œ≤ ‚Üí ‚Ñï} :
    (‚àë' b, (f b : ‚Ñï‚àû)) ‚â† ‚ä§ ‚Üî Summable f := by
  refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ ENat.coe_tsum h ‚ñ∏ WithTop.coe_ne_top‚ü©
  lift ‚àë' b, (f b : ‚Ñï‚àû) to ‚Ñï using h with a ha
  refine' ‚ü®a, ENat.hasSum_coe.1 _‚ü©
  rw [ha]
  exact ENat.summable.hasSum

protected theorem tsum_eq_iSup_sum : ‚àë' x, f x = (‚®Ü s : Finset Œ±, ‚àë a in s, f a) :=
  ENat.hasSum.tsum_eq

protected theorem tsum_comm {f : Œ± ‚Üí Œ≤ ‚Üí ‚Ñï‚àû} : 
    ‚àë' (a : Œ±) (b : Œ≤), f a b = ‚àë' (b : Œ≤) (a : Œ±), f a b :=
  tsum_comm' ENat.summable (fun _ ‚Ü¶ ENat.summable) fun _ ‚Ü¶ ENat.summable

protected theorem tsum_prod {f : Œ± ‚Üí Œ≤ ‚Üí ‚Ñï‚àû} : ‚àë' p : Œ± √ó Œ≤, f p.1 p.2 = ‚àë' (a) (b), f a b :=
  tsum_prod' ENat.summable fun _ ‚Ü¶ ENat.summable

protected theorem tsum_add : ‚àë' a, (f a + g a) = ‚àë' a, f a + ‚àë' a, g a :=
  tsum_add ENat.summable ENat.summable

protected theorem tsum_le_tsum (h : f ‚â§ g) : ‚àë' a, f a ‚â§ ‚àë' a, g a :=
  tsum_le_tsum h ENat.summable ENat.summable

protected theorem sum_le_tsum {f : Œ± ‚Üí ‚Ñï‚àû} (s : Finset Œ±) : ‚àë x in s, f x ‚â§ ‚àë' x, f x :=
  sum_le_tsum s (fun _ _ ‚Ü¶ zero_le _) ENat.summable  

protected theorem le_tsum (a : Œ±) : f a ‚â§ ‚àë' a, f a :=
  le_tsum' ENat.summable a

@[simp] protected theorem tsum_eq_zero : ‚àë' i, f i = 0 ‚Üî ‚àÄ i, f i = 0 :=
  tsum_eq_zero_iff ENat.summable

protected theorem tsum_eq_top_of_eq_top : (‚àÉ a, f a = ‚ä§) ‚Üí ‚àë' a, f a = ‚ä§
  | ‚ü®a, ha‚ü© => top_unique <| ha ‚ñ∏ ENat.le_tsum a

-- sets 

protected theorem tsum_union_disjoint {s t : Set Œ±} (hd : Disjoint s t) :
    ‚àë' (x : ‚Üë(s ‚à™ t)), f x = ‚àë' (x : s), f x + ‚àë' (x : t), f x :=
  tsum_union_disjoint hd ENat.summable ENat.summable

protected theorem tsum_le_of_subset {s t : Set Œ±} (h : s ‚äÜ t) : 
    ‚àë' (x : s), f x ‚â§ ‚àë' (x : t), f x := by
  rw [‚Üêdiff_union_of_subset h, ENat.tsum_union_disjoint disjoint_sdiff_left]
  exact le_add_self

protected theorem tsum_le_union (s t : Set Œ±) : 
    ‚àë' (x : ‚Üë(s ‚à™ t)), f (x : Œ±) ‚â§ ‚àë' (x : s), f x + ‚àë' (x : t), f x := by 
  rw [‚Üêdiff_union_self, ENat.tsum_union_disjoint disjoint_sdiff_left]
  exact add_le_add_right (ENat.tsum_le_of_subset (diff_subset _ _)) _

protected theorem tsum_insert {s : Set Œ±} {a : Œ±} (h : a ‚àâ s) : 
    ‚àë' (x : ‚Üë(insert a s)), f x = f a + ‚àë' (x : s), f x := by 
  rw [‚Üêsingleton_union, ENat.tsum_union_disjoint, tsum_singleton]
  rwa [disjoint_singleton_left]

protected theorem tsum_sub (hfin : ‚àë' a, g a ‚â† ‚ä§) (h : g ‚â§ f) :
    ‚àë' a, (f a - g a) = ‚àë' a, f a - ‚àë' a, g a := by
  rw [‚ÜêWithTop.add_right_cancel_iff hfin, ‚ÜêENat.tsum_add, 
    tsum_congr (fun i ‚Ü¶ tsub_add_cancel_of_le (h i)), tsub_add_cancel_of_le (ENat.tsum_le_tsum h)] 
  
theorem Finite.tsum_eq_top_iff {s : Set Œ±} (hs : s.Finite) : 
    ‚àë' (x : s), f x = ‚ä§ ‚Üî ‚àÉ a ‚àà s, f a = ‚ä§ := by 
  refine' ‚ü®hs.induction_on (by simp) @fun a s' has' _ IH htop ‚Ü¶ _, 
    fun ‚ü®a, has, ha‚ü© ‚Ü¶ ENat.tsum_eq_top_of_eq_top ‚ü®‚ü®a, has‚ü©, ha‚ü©‚ü©
  obtain (ht | hne) := eq_or_ne (f a) ‚ä§ 
  ¬∑ exact ‚ü®a, mem_insert _ _, ht‚ü© 
  rw [ENat.tsum_insert has', WithTop.add_eq_top, or_iff_right hne] at htop
  obtain ‚ü®b, hbs, hbtop‚ü© := IH htop
  exact ‚ü®b, Or.inr hbs, hbtop‚ü© 

    
-- cardinality

@[simp] protected theorem tsum_const (s : Set Œ±) (c : ‚Ñï‚àû) : ‚àë' (_ : s), c = s.encard * c := by 
  obtain (rfl | hc) := eq_or_ne c 0
  ¬∑ simp
  obtain (rfl | htop | ‚ü®a, has, -‚ü©) := s.eq_empty_or_encard_eq_top_or_encard_diff_singleton_lt
  ¬∑ simp
  ¬∑ rw [tsum_subtype s (fun _ ‚Ü¶ c), ENat.tsum_eq_iSup_sum, htop, WithTop.top_mul hc, iSup_eq_top]
    intro b hb
    lift b to ‚Ñï using hb.ne
    obtain ‚ü®t, hts, ht‚ü© := exists_subset_encard_eq ((le_top (a := (b+1 : ‚Ñï‚àû))).trans_eq htop.symm)
    have htfin : t.Finite
    ¬∑ rw [‚Üêencard_ne_top_iff, ht, WithTop.add_ne_top, and_iff_left WithTop.one_ne_top]
      exact hb.ne
    refine' ‚ü®htfin.toFinset, lt_of_lt_of_le _ 
      (Finset.sum_le_sum (f := fun _ ‚Ü¶ 1) (g := indicator s (fun _ ‚Ü¶ c)) (s := htfin.toFinset) _)‚ü© 
    ¬∑ rw [Finset.sum_const, nsmul_eq_mul, mul_one, ‚Üêhtfin.encard_eq_coe_toFinset_card, ht, 
        ‚ÜêENat.add_one_le_iff hb.ne]
    simp only [Finite.mem_toFinset]
    intro i hit
    rwa [indicator_of_mem (hts hit), ENat.one_le_iff_ne_zero]
  have has' : a ‚àâ s \ {a} := fun h ‚Ü¶ h.2 rfl
  rw [‚Üêinsert_eq_of_mem has, ‚Üêinsert_diff_singleton, ENat.tsum_insert has' (f := fun _ ‚Ü¶ c),    
    encard_insert_of_not_mem has', add_mul, one_mul, add_comm, ENat.tsum_const (s \ {a}) c]
termination_by _ => s.encard 
      
theorem tsum_one (s : Set Œ±) : ‚àë' (_ : s), 1 = s.encard := by 
  simp

protected theorem encard_support_le_tsum : f.support.encard ‚â§ ‚àë' x, f x := by 
  classical
  rw [‚Üêtsum_one, tsum_subtype f.support (fun _ ‚Ü¶ 1)]
  apply ENat.tsum_le_tsum  
  intro a
  simp only [Function.mem_support, ne_eq, not_not]
  rw [indicator_apply]
  split_ifs with h
  ¬∑ rwa [ENat.one_le_iff_ne_zero]
  apply zero_le 
    
protected theorem tsum_eq_top_of_support_infinite (hf : f.support.Infinite) : ‚àë' a, f a = ‚ä§ := by 
  have := ENat.encard_support_le_tsum (f := f)
  rwa [hf.encard_eq, top_le_iff] at this

protected theorem tsum_eq_top_iff : ‚àë' a, f a = ‚ä§ ‚Üî f.support.Infinite ‚à® ‚àÉ a, f a = ‚ä§ := by 
  refine' ‚ü®fun h ‚Ü¶ _, _‚ü©
  ¬∑ rw [or_iff_not_imp_left, not_infinite]
    intro hfin
    rw [‚Üêtsum_support_eq, Finite.tsum_eq_top_iff hfin] at h
    obtain ‚ü®a, -, h‚ü© := h
    exact ‚ü®a, h‚ü© 
  rintro (h | h)
  ¬∑ exact ENat.tsum_eq_top_of_support_infinite h     
  exact ENat.tsum_eq_top_of_eq_top h

protected theorem tsum_inter_fiber_eq {Œπ} {s : Set Œπ} (f : Œπ ‚Üí Œ±) : 
    ‚àë' (a : Œ±), (s ‚à© f ‚Åª¬π' {a}).encard = s.encard := by
  classical
  obtain (hs | hs) := s.finite_or_infinite
  ¬∑ refine hs.induction_on (by simp) (@fun a t hat _ IH ‚Ü¶ ?_)
    have hcong : ‚àÄ x, 
      encard ((insert a t) ‚à© f‚Åª¬π' {x}) = encard (t ‚à© f ‚Åª¬π' {x}) + (if x = f a then 1 else 0)
    ¬∑ intro x
      split_ifs with h
      ¬∑ rw [insert_inter_of_mem, encard_insert_of_not_mem (fun ha ‚Ü¶ hat ha.1)]; exact h.symm
      rw [insert_inter_of_not_mem, add_zero]; exact Ne.symm h
    rw [tsum_congr hcong, ENat.tsum_add, IH, encard_insert_of_not_mem hat, tsum_ite_eq]
  rw [hs.encard_eq, ENat.tsum_eq_top_iff]
  by_contra' h
  simp_rw [not_infinite, encard_ne_top_iff] at h
  apply hs
  refine' (h.1.biUnion (t := fun (a : Œ±) ‚Ü¶ s ‚à© f ‚Åª¬π' {a}) fun a _ ‚Ü¶ by simp [h.2 a]).subset 
    (fun x hx ‚Ü¶ _)
  simp only [Function.mem_support, ne_eq, encard_eq_zero, mem_iUnion, mem_inter_iff, mem_preimage, 
    mem_singleton_iff, exists_and_left, exists_prop, exists_eq_right', ‚Üênonempty_iff_ne_empty, 
    and_iff_right hx]
  exact ‚ü®x, hx, rfl‚ü©
  
protected theorem tsum_fiber_eq {Œπ} (f : Œπ ‚Üí Œ±) : 
    ‚àë' (a : Œ±), (f ‚Åª¬π' {a}).encard = (univ : Set Œπ).encard := by
  rw [‚ÜêENat.tsum_inter_fiber_eq (s := univ) f, tsum_congr]; intro b; rw [univ_inter]
  
theorem ENat.tsum_sUnion_eq {c : Set (Set Œ±)} (hc : c.PairwiseDisjoint id) :
    ‚àë' (t : c), (t : Set Œ±).encard = (‚ãÉ‚ÇÄ c).encard := by
  rw [‚Üêtsum_support_eq]


  obtain (hs | hs) := c.finite_or_infinite
  ¬∑ refine hs.induction_on (by rw [sUnion_empty]; simp) (@fun a t hat _ IH ‚Ü¶ ?_)
    rw [ENat.tsum_insert hat, IH, sUnion_insert, encard_union_eq]
    sorry
  
    
  -- have : ‚àÄ (x : ‚ãÉ‚ÇÄ c), ‚àÉ (t : c), (x : Œ±) ‚àà (t : Set Œ±)
  -- ¬∑ sorry
  
  -- choose f hf using this 
  -- rw [‚Üêencard_univ_coe, ‚ÜêENat.tsum_fiber_eq f, tsum_congr]
  -- rintro ‚ü®b, hb‚ü© 
  -- rw [‚ÜêSubtype.val_injective.encard_image]
  -- congr
  -- ext x
  -- simp only [mem_image, mem_preimage, mem_singleton_iff, Subtype.exists, mem_sUnion, 
  --   exists_and_right, exists_eq_right]
  -- refine' ‚ü®fun h ‚Ü¶ ‚ü®b, _‚ü©, fun h ‚Ü¶ _‚ü©
  -- ¬∑  simp

  
  

  
  

  



--   rw [‚Üêtsum_one, tsum_congr (fun (t : c) ‚Ü¶ (tsum_one (t : Set Œ±)).symm)]


  


    

  -- ¬∑ simp
  -- ¬∑ rw [tsum_subtype]
    -- simp_rw [ENat.tsum_eq_iSup_sum, htop, Finset.sum_const]
    -- rw [WithTop.top_mul hc, iSup_eq_top]
    -- intro b hb
    -- obtain ‚ü®t, hts, ht‚ü© := exists_subset_encard_eq ((le_top (a := b+1)).trans_eq htop.symm)
    
    
      
    -- refine' ‚ü®((‚Üë) : s ‚Üí Œ±)‚Åª¬π' ht.to_Finset, _‚ü©  

    
    


end tsum 



-- theorem isOpen_ne_top : IsOpen {a : ‚Ñï‚àû | a ‚â† ‚ä§} := isOpen_ne 


-- theorem isOpen_top_not_mem (s : set ‚Ñï‚àû) : 


-- theorem WithTop.induced [Preorder Œ≤] (t : TopologicalSpace Œ≤) [OrderTopology Œ≤]
--     (tw : TopologicalSpace (WithTop Œ≤)) [OrderTopology (WithTop Œ≤)] : 
--     t = TopologicalSpace.induced (‚Üë) tw := by 
--   ext s
--   simp_rw [isOpen_induced_eq, mem_image, mem_setOf]
   



-- theorem WithTop.inducing_coe {Œ≤ : Type _} [Preorder Œ≤] [TopologicalSpace Œ≤] [OrderTopology Œ≤]
--     [TopologicalSpace (WithTop Œ≤)] [OrderTopology (WithTop Œ≤)] : 
--     Inducing ((‚Üë) : Œ≤ ‚Üí WithTop Œ≤) := by
--   rw [inducing_iff]

-- theorem WithTop.embedding_coe {Œ≤ : Type _} [Preorder Œ≤] [TopologicalSpace Œ≤] [OrderTopology Œ≤]
--     [TopologicalSpace (WithTop Œ≤)] [OrderTopology (WithTop Œ≤)] : 
--     Embedding ((‚Üë) : Œ≤ ‚Üí WithTop Œ≤) := by
  
  

-- theorem foo_tendsto_coe {Œ± Œ≤ : Type _} [Preorder Œ≤] [TopologicalSpace Œ≤] [OrderTopology Œ≤] 
--   [TopologicalSpace (WithTop Œ≤)] [OrderTopology (WithTop Œ≤)] {f : Filter Œ±} {m : Œ± ‚Üí Œ≤} {a : Œ≤} :
--     Filter.Tendsto (fun a ‚Ü¶ (m a : WithTop Œ≤)) f (nhds (a : WithTop Œ≤)) ‚Üî Filter.Tendsto m f (nhds a) := by 
--   have := embedding_coe.tendsto_nhds_iff







-- example {Œ± : Type _} [OrderedAddCommMonoid Œ±] [TopologicalSpace Œ±] [OrderTopology Œ±] 
--   [ContinuousAdd Œ±] [TopologicalSpace (WithTop Œ±)] [OrderTopology (WithTop Œ±)] :
--     ContinuousAdd (WithTop Œ±) := by 
--   apply continuousAdd_of_comm_of_nhds_zero
  


  

  

-- protected theorem hasSum : HasSum f (‚®Ü s : Finset Œπ, ‚àë a in s, f a) :=
--   tendsto_atTop_iSup fun _ _ ‚Ü¶ Finset.sum_le_sum_of_subset
  
-- protected theorem summable : Summable f := 
--   ‚ü®_, ENat.hasSum‚ü© 

-- theorem ENat.tsum_eq_iSup_sum : ‚àë' x, f x = (‚®Ü s : Finset Œπ, ‚àë a in s, f a) :=
--   ENat.hasSum.tsum_eq

-- theorem ENat.tsum_comm {f : Œ± ‚Üí Œ≤ ‚Üí ‚Ñï‚àû} : 
--     ‚àë' (a : Œ±) (b : Œ≤), f a b = ‚àë' (b : Œ≤) (a : Œ±), f a b := by 
--   have : ContinuousAdd ‚Ñù‚â•0‚àû
--   ¬∑ exact
--     ENNReal.instContinuousAddENNRealInstTopologicalSpaceENNRealToAddToDistribToNonUnitalNonAssocSemiringToNonAssocSemiringToSemiringToOrderedSemiringToOrderedCommSemiringInstCanonicallyOrderedCommSemiringENNReal 




-- protected theorem tsum_eq_iSup_sum : ‚àë' a, f a = ‚®Ü s : Finset Œ±, ‚àë a in s, f a :=
--   ENat.hasSum.tsum_eq

  
-- section tsum
 
-- variable [HasSummable Œ≤] {f g : Œ± ‚Üí Œ≤}

-- @[norm_cast]
-- protected theorem hasSum_coe {f : Œ± ‚Üí ‚Ñù‚â•0} {r : ‚Ñù‚â•0} :
--     HasSum (fun a ‚Ü¶ (f a : Œ≤)) ‚Üër ‚Üî HasSum f r := by
--   simp only [HasSum, ‚Üê coe_finset_sum, tendsto_coe]

-- protected theorem tsum_coe_eq {f : Œ± ‚Üí ‚Ñù‚â•0} (h : HasSum f r) : (‚àë' a, (f a : Œ≤)) = r :=
--   (ENNReal.hasSum_coe.2 h).tsum_eq

-- protected theorem coe_tsum {f : Œ± ‚Üí ‚Ñù‚â•0} : Summable f ‚Üí ‚Üë(tsum f) = ‚àë' a, (f a : Œ≤)
--   | ‚ü®r, hr‚ü© ‚Ü¶ by rw [hr.tsum_eq, ENNReal.tsum_coe_eq hr]

-- protected theorem hasSum : HasSum f (‚®Ü s : Finset Œ±, ‚àë a in s, f a) :=
--   tendsto_atTop_iSup fun _ _ ‚Ü¶ Finset.sum_le_sum_of_subset

-- @[simp]
-- protected theorem summable : Summable f :=
--   ‚ü®_, ENNReal.hasSum‚ü©

-- theorem tsum_coe_ne_top_iff_summable {f : Œ≤ ‚Üí ‚Ñù‚â•0} : (‚àë' b, (f b : Œ≤)) ‚â† ‚àû ‚Üî Summable f := by
--   refine ‚ü®fun h ‚Ü¶ ?_, fun h ‚Ü¶ ENNReal.coe_tsum h ‚ñ∏ ENNReal.coe_ne_top‚ü©
--   lift ‚àë' b, (f b : Œ≤) to ‚Ñù‚â•0 using h with a ha
--   refine' ‚ü®a, ENNReal.hasSum_coe.1 _‚ü©
--   rw [ha]
--   exact ENat.summable.hasSum

-- protected theorem tsum_eq_iSup_sum : ‚àë' a, f a = ‚®Ü s : Finset Œ±, ‚àë a in s, f a :=
--   ENNReal.hasSum.tsum_eq

-- protected theorem tsum_eq_iSup_sum' {Œπ : Type _} (s : Œπ ‚Üí Finset Œ±) (hs : ‚àÄ t, ‚àÉ i, t ‚äÜ s i) :
--     ‚àë' a, f a = ‚®Ü i, ‚àë a in s i, f a := by
--   rw [ENNReal.tsum_eq_iSup_sum]
--   symm
--   change ‚®Ü i : Œπ, (fun t : Finset Œ± ‚Ü¶ ‚àë a in t, f a) (s i) = ‚®Ü s : Finset Œ±, ‚àë a in s, f a
--   exact (Finset.sum_mono_set f).iSup_comp_eq hs

-- protected theorem tsum_sigma {Œ≤ : Œ± ‚Üí Type _} (f : ‚àÄ a, Œ≤ a ‚Üí Œ≤) :
--     ‚àë' p : Œ£a, Œ≤ a, f p.1 p.2 = ‚àë' (a) (b), f a b :=
--   tsum_sigma' (fun _ ‚Ü¶ ENat.summable) ENat.summable

-- protected theorem tsum_sigma' {Œ≤ : Œ± ‚Üí Type _} (f : (Œ£a, Œ≤ a) ‚Üí Œ≤) :
--     ‚àë' p : Œ£a, Œ≤ a, f p = ‚àë' (a) (b), f ‚ü®a, b‚ü© :=
--   tsum_sigma' (fun _ ‚Ü¶ ENat.summable) ENat.summable

-- protected theorem tsum_prod {f : Œ± ‚Üí Œ≤ ‚Üí Œ≤} : ‚àë' p : Œ± √ó Œ≤, f p.1 p.2 = ‚àë' (a) (b), f a b :=
--   tsum_prod' ENat.summable fun _ ‚Ü¶ ENat.summable

-- protected theorem tsum_prod' {f : Œ± √ó Œ≤ ‚Üí Œ≤} : ‚àë' p : Œ± √ó Œ≤, f p = ‚àë' (a) (b), f (a, b) :=
--   tsum_prod' ENat.summable fun _ ‚Ü¶ ENat.summable

-- protected theorem tsum_comm {f : Œ± ‚Üí Œ≤ ‚Üí Œ≤} : ‚àë' a, ‚àë' b, f a b = ‚àë' b, ‚àë' a, f a b :=
--   tsum_comm' ENat.summable (fun _ ‚Ü¶ ENat.summable) fun _ ‚Ü¶ ENat.summable

-- protected theorem tsum_add : ‚àë' a, (f a + g a) = ‚àë' a, f a + ‚àë' a, g a :=
--   tsum_add ENat.summable ENat.summable

-- protected theorem tsum_le_tsum (h : ‚àÄ a, f a ‚â§ g a) : ‚àë' a, f a ‚â§ ‚àë' a, g a :=
--   tsum_le_tsum h ENat.summable ENat.summable

-- protected theorem sum_le_tsum {f : Œ± ‚Üí Œ≤} (s : Finset Œ±) : ‚àë x in s, f x ‚â§ ‚àë' x, f x :=
--   sum_le_tsum s (fun _ _ ‚Ü¶ zero_le _) ENat.summable

-- protected theorem tsum_eq_iSup_nat' {f : ‚Ñï ‚Üí Œ≤} {N : ‚Ñï ‚Üí ‚Ñï} (hN : Tendsto N atTop atTop) :
--     ‚àë' i : ‚Ñï, f i = ‚®Ü i : ‚Ñï, ‚àë a in Finset.range (N i), f a :=
--   ENNReal.tsum_eq_iSup_sum' _ fun t ‚Ü¶
--     let ‚ü®n, hn‚ü© := t.exists_nat_subset_range
--     let ‚ü®k, _, hk‚ü© := exists_le_of_tendsto_atTop hN 0 n
--     ‚ü®k, Finset.Subset.trans hn (Finset.range_mono hk)‚ü©

-- protected theorem tsum_eq_iSup_nat {f : ‚Ñï ‚Üí Œ≤} :
--     ‚àë' i : ‚Ñï, f i = ‚®Ü i : ‚Ñï, ‚àë a in Finset.range i, f a :=
--   ENNReal.tsum_eq_iSup_sum' _ Finset.exists_nat_subset_range

-- protected theorem tsum_eq_liminf_sum_nat {f : ‚Ñï ‚Üí Œ≤} :
--     ‚àë' i, f i = liminf (fun n ‚Ü¶ ‚àë i in Finset.range n, f i) atTop :=
--   ENat.summable.hasSum.tendsto_sum_nat.liminf_eq.symm

-- protected theorem tsum_eq_limsup_sum_nat {f : ‚Ñï ‚Üí Œ≤} :
--     ‚àë' i, f i = limsup (fun n ‚Ü¶ ‚àë i in Finset.range n, f i) atTop :=
--   ENat.summable.hasSum.tendsto_sum_nat.limsup_eq.symm

-- protected theorem le_tsum (a : Œ±) : f a ‚â§ ‚àë' a, f a :=
--   le_tsum' ENat.summable a

-- @[simp]
-- protected theorem tsum_eq_zero : ‚àë' i, f i = 0 ‚Üî ‚àÄ i, f i = 0 :=
--   tsum_eq_zero_iff ENat.summable

-- protected theorem tsum_eq_top_of_eq_top : (‚àÉ a, f a = ‚àû) ‚Üí ‚àë' a, f a = ‚àû
--   | ‚ü®a, ha‚ü© ‚Ü¶ top_unique <| ha ‚ñ∏ ENNReal.le_tsum a

-- protected theorem lt_top_of_tsum_ne_top {a : Œ± ‚Üí Œ≤} (tsum_ne_top : ‚àë' i, a i ‚â† ‚àû) (j : Œ±) :
--     a j < ‚àû := by
--   contrapose! tsum_ne_top with h
--   exact ENNReal.tsum_eq_top_of_eq_top ‚ü®j, top_unique h‚ü©

-- @[simp]
-- protected theorem tsum_top [Nonempty Œ±] : ‚àë' _ : Œ±, ‚àû = ‚àû :=
--   let ‚ü®a‚ü© := ‚ÄπNonempty Œ±‚Ä∫
--   ENNReal.tsum_eq_top_of_eq_top ‚ü®a, rfl‚ü©

-- theorem tsum_const_eq_top_of_ne_zero {Œ± : Type _} [Infinite Œ±] {c : Œ≤} (hc : c ‚â† 0) :
--     ‚àë' _ : Œ±, c = ‚àû := by
--   have A : Tendsto (fun n : ‚Ñï ‚Ü¶ (n : Œ≤) * c) atTop (ùìù (‚àû * c)) := by
--     apply ENNReal.Tendsto.mul_const tendsto_nat_nhds_top
--     simp only [true_or_iff, top_ne_zero, Ne.def, not_false_iff]
--   have B : ‚àÄ n : ‚Ñï, (n : Œ≤) * c ‚â§ ‚àë' _ : Œ±, c := fun n ‚Ü¶ by
--     rcases Infinite.exists_subset_card_eq Œ± n with ‚ü®s, hs‚ü©
--     simpa [hs] using @ENNReal.sum_le_tsum Œ± (fun _ ‚Ü¶ c) s
--   simpa [hc] using le_of_tendsto' A B

-- protected theorem ne_top_of_tsum_ne_top (h : ‚àë' a, f a ‚â† ‚àû) (a : Œ±) : f a ‚â† ‚àû := fun ha ‚Ü¶
--   h <| ENNReal.tsum_eq_top_of_eq_top ‚ü®a, ha‚ü©

-- protected theorem tsum_mul_left : ‚àë' i, a * f i = a * ‚àë' i, f i := by
--   by_cases hf : ‚àÄ i, f i = 0
--   ¬∑ simp [hf]
--   ¬∑ rw [‚Üê ENNReal.tsum_eq_zero] at hf
--     have : Tendsto (fun s : Finset Œ± ‚Ü¶ ‚àë j in s, a * f j) atTop (ùìù (a * ‚àë' i, f i)) := by
--       simp only [‚Üê Finset.mul_sum]
--       exact ENNReal.Tendsto.const_mul ENat.summable.hasSum (Or.inl hf)
--     exact HasSum.tsum_eq this

-- protected theorem tsum_mul_right : ‚àë' i, f i * a = (‚àë' i, f i) * a := by
--   simp [mul_comm, ENNReal.tsum_mul_left]

-- protected theorem tsum_const_smul {R} [SMul R Œ≤] [IsScalarTower R Œ≤ Œ≤] (a : R) :
--     ‚àë' i, a ‚Ä¢ f i = a ‚Ä¢ ‚àë' i, f i := by
--   simpa only [smul_one_mul] using @ENNReal.tsum_mul_left _ (a ‚Ä¢ (1 : Œ≤)) _

-- @[simp]
-- theorem tsum_iSup_eq {Œ± : Type _} (a : Œ±) {f : Œ± ‚Üí Œ≤} : (‚àë' b : Œ±, ‚®Ü _ : a = b, f b) = f a :=
--   (tsum_eq_single a fun _ h ‚Ü¶ by simp [h.symm]).trans <| by simp

-- theorem hasSum_iff_tendsto_nat {f : ‚Ñï ‚Üí Œ≤} (r : Œ≤) :
--     HasSum f r ‚Üî Tendsto (fun n : ‚Ñï ‚Ü¶ ‚àë i in Finset.range n, f i) atTop (ùìù r) := by
--   refine' ‚ü®HasSum.tendsto_sum_nat, fun h ‚Ü¶ _‚ü©
--   rw [‚Üê iSup_eq_of_tendsto _ h, ‚Üê ENNReal.tsum_eq_iSup_nat]
--   ¬∑ exact ENat.summable.hasSum
--   ¬∑ exact fun s t hst ‚Ü¶ Finset.sum_le_sum_of_subset (Finset.range_subset.2 hst)

-- theorem tendsto_nat_tsum (f : ‚Ñï ‚Üí Œ≤) :
--     Tendsto (fun n : ‚Ñï ‚Ü¶ ‚àë i in Finset.range n, f i) atTop (ùìù (‚àë' n, f n)) := by
--   rw [‚Üê hasSum_iff_tendsto_nat]
--   exact ENat.summable.hasSum

-- theorem toNNReal_apply_of_tsum_ne_top {Œ± : Type _} {f : Œ± ‚Üí Œ≤} (hf : ‚àë' i, f i ‚â† ‚àû) (x : Œ±) :
--     (((ENNReal.toNNReal ‚àò f) x : ‚Ñù‚â•0) : Œ≤) = f x :=
--   coe_toNNReal <| ENNReal.ne_top_of_tsum_ne_top hf _

-- theorem summable_toNNReal_of_tsum_ne_top {Œ± : Type _} {f : Œ± ‚Üí Œ≤} (hf : ‚àë' i, f i ‚â† ‚àû) :
--     Summable (ENNReal.toNNReal ‚àò f) := by
--   simpa only [‚Üê tsum_coe_ne_top_iff_summable, toNNReal_apply_of_tsum_ne_top hf] using hf

-- theorem tendsto_cofinite_zero_of_tsum_ne_top {Œ±} {f : Œ± ‚Üí Œ≤} (hf : ‚àë' x, f x ‚â† ‚àû) :
--     Tendsto f cofinite (ùìù 0) := by
--   have f_ne_top : ‚àÄ n, f n ‚â† ‚àû := ENNReal.ne_top_of_tsum_ne_top hf
--   have h_f_coe : f = fun n ‚Ü¶ ((f n).toNNReal : ENNReal) :=
--     funext fun n ‚Ü¶ (coe_toNNReal (f_ne_top n)).symm
--   rw [h_f_coe, ‚Üê @coe_zero, tendsto_coe]
--   exact NNReal.tendsto_cofinite_zero_of_summable (summable_toNNReal_of_tsum_ne_top hf)

-- theorem tendsto_atTop_zero_of_tsum_ne_top {f : ‚Ñï ‚Üí Œ≤} (hf : ‚àë' x, f x ‚â† ‚àû) :
--     Tendsto f atTop (ùìù 0) := by
--   rw [‚Üê Nat.cofinite_eq_atTop]
--   exact tendsto_cofinite_zero_of_tsum_ne_top hf

-- /-- The sum over the complement of a finset tends to `0` when the finset grows to cover the whole
-- space. This does not need a summability assumption, as otherwise all sums are zero. -/
-- theorem tendsto_tsum_compl_atTop_zero {Œ± : Type _} {f : Œ± ‚Üí Œ≤} (hf : ‚àë' x, f x ‚â† ‚àû) :
--     Tendsto (fun s : Finset Œ± ‚Ü¶ ‚àë' b : { x // x ‚àâ s }, f b) atTop (ùìù 0) := by
--   lift f to Œ± ‚Üí ‚Ñù‚â•0 using ENNReal.ne_top_of_tsum_ne_top hf
--   convert ENNReal.tendsto_coe.2 (NNReal.tendsto_tsum_compl_atTop_zero f)
--   rw [ENNReal.coe_tsum]
--   exact NNReal.summable_comp_injective (tsum_coe_ne_top_iff_summable.1 hf) Subtype.coe_injective

-- protected theorem tsum_apply {Œπ Œ± : Type _} {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {x : Œ±} :
--     (‚àë' i, f i) x = ‚àë' i, f i x :=
--   tsum_apply <| Pi.summable.mpr fun _ ‚Ü¶ ENat.summable

-- theorem tsum_sub {f : ‚Ñï ‚Üí Œ≤} {g : ‚Ñï ‚Üí Œ≤} (h‚ÇÅ : ‚àë' i, g i ‚â† ‚àû) (h‚ÇÇ : g ‚â§ f) :
--     ‚àë' i, (f i - g i) = ‚àë' i, f i - ‚àë' i, g i :=
--   have : ‚àÄ i, f i - g i + g i = f i := fun i ‚Ü¶ tsub_add_cancel_of_le (h‚ÇÇ i)
--   ENNReal.eq_sub_of_add_eq h‚ÇÅ <| by simp only [‚Üê ENNReal.tsum_add, this]

-- theorem tsum_comp_le_tsum_of_injective {f : Œ± ‚Üí Œ≤} (hf : Injective f) (g : Œ≤ ‚Üí Œ≤) :
--     ‚àë' x, g (f x) ‚â§ ‚àë' y, g y :=
--   tsum_le_tsum_of_inj f hf (fun _ _ ‚Ü¶ zero_le _) (fun _ ‚Ü¶ le_rfl) ENat.summable
--     ENat.summable

-- theorem tsum_le_tsum_comp_of_surjective {f : Œ± ‚Üí Œ≤} (hf : Surjective f) (g : Œ≤ ‚Üí Œ≤) :
--     ‚àë' y, g y ‚â§ ‚àë' x, g (f x) :=
--   calc ‚àë' y, g y = ‚àë' y, g (f (surjInv hf y)) := by simp only [surjInv_eq hf]
--   _ ‚â§ ‚àë' x, g (f x) := tsum_comp_le_tsum_of_injective (injective_surjInv hf) _

-- theorem tsum_mono_subtype (f : Œ± ‚Üí Œ≤) {s t : Set Œ±} (h : s ‚äÜ t) :
--     ‚àë' x : s, f x ‚â§ ‚àë' x : t, f x :=
--   tsum_comp_le_tsum_of_injective (inclusion_injective h) _

-- theorem tsum_iUnion_le_tsum {Œπ : Type _} (f : Œ± ‚Üí Œ≤) (t : Œπ ‚Üí Set Œ±) :
--     ‚àë' x : ‚ãÉ i, t i, f x ‚â§ ‚àë' i, ‚àë' x : t i, f x :=
--   calc ‚àë' x : ‚ãÉ i, t i, f x ‚â§ ‚àë' x : Œ£ i, t i, f x.2 :=
--     tsum_le_tsum_comp_of_surjective (sigmaToiUnion_surjective t) _
--   _ = ‚àë' i, ‚àë' x : t i, f x := ENNReal.tsum_sigma' _

-- theorem tsum_biUnion_le_tsum {Œπ : Type _} (f : Œ± ‚Üí Œ≤) (s : Set Œπ) (t : Œπ ‚Üí Set Œ±) :
--     ‚àë' x : ‚ãÉ i ‚àà s , t i, f x ‚â§ ‚àë' i : s, ‚àë' x : t i, f x :=
--   calc ‚àë' x : ‚ãÉ i ‚àà s, t i, f x = ‚àë' x : ‚ãÉ i : s, t i, f x := tsum_congr_subtype _ <| by simp
--   _ ‚â§ ‚àë' i : s, ‚àë' x : t i, f x := tsum_iUnion_le_tsum _ _

-- theorem tsum_biUnion_le {Œπ : Type _} (f : Œ± ‚Üí Œ≤) (s : Finset Œπ) (t : Œπ ‚Üí Set Œ±) :
--     ‚àë' x : ‚ãÉ i ‚àà s, t i, f x ‚â§ ‚àë i in s, ‚àë' x : t i, f x :=
--   (tsum_biUnion_le_tsum f s.toSet t).trans_eq (Finset.tsum_subtype s fun i ‚Ü¶ ‚àë' x : t i, f x)

-- theorem tsum_iUnion_le {Œπ : Type _} [Fintype Œπ] (f : Œ± ‚Üí Œ≤) (t : Œπ ‚Üí Set Œ±) :
--     ‚àë' x : ‚ãÉ i, t i, f x ‚â§ ‚àë i, ‚àë' x : t i, f x := by
--   rw [‚Üê tsum_fintype]
--   exact tsum_iUnion_le_tsum f t

-- theorem tsum_union_le (f : Œ± ‚Üí Œ≤) (s t : Set Œ±) :
--     ‚àë' x : ‚Üë(s ‚à™ t), f x ‚â§ ‚àë' x : s, f x + ‚àë' x : t, f x :=
--   calc ‚àë' x : ‚Üë(s ‚à™ t), f x = ‚àë' x : ‚ãÉ b, cond b s t, f x := tsum_congr_subtype _ union_eq_iUnion
--   _ ‚â§ _ := by simpa using tsum_iUnion_le f (cond ¬∑ s t)

-- theorem tsum_eq_add_tsum_ite {f : Œ≤ ‚Üí Œ≤} (b : Œ≤) :
--     ‚àë' x, f x = f b + ‚àë' x, ite (x = b) 0 (f x) :=
--   tsum_eq_add_tsum_ite' b ENat.summable

-- theorem tsum_add_one_eq_top {f : ‚Ñï ‚Üí Œ≤} (hf : ‚àë' n, f n = ‚àû) (hf0 : f 0 ‚â† ‚àû) :
--     ‚àë' n, f (n + 1) = ‚àû := by
--   rw [tsum_eq_zero_add' ENat.summable, add_eq_top] at hf
--   exact hf.resolve_left hf0

-- /-- A sum of extended nonnegative reals which is finite can have only finitely many terms
-- above any positive threshold.-/
-- theorem finite_const_le_of_tsum_ne_top {Œπ : Type _} {a : Œπ ‚Üí Œ≤} (tsum_ne_top : ‚àë' i, a i ‚â† ‚àû)
--     {Œµ : Œ≤} (Œµ_ne_zero : Œµ ‚â† 0) : { i : Œπ | Œµ ‚â§ a i }.Finite := by
--   by_contra h
--   have := Infinite.to_subtype h
--   refine tsum_ne_top (top_unique ?_)
--   calc ‚ä§ = ‚àë' _ : { i | Œµ ‚â§ a i }, Œµ := (tsum_const_eq_top_of_ne_zero Œµ_ne_zero).symm
--   _ ‚â§ ‚àë' i, a i := tsum_le_tsum_of_inj (‚Üë) Subtype.val_injective (fun _ _ ‚Ü¶ zero_le _)
--     (fun i ‚Ü¶ i.2) ENat.summable ENat.summable

-- /-- Markov's inequality for `Finset.card` and `tsum` in `Œ≤`. -/
-- theorem finset_card_const_le_le_of_tsum_le {Œπ : Type _} {a : Œπ ‚Üí Œ≤} {c : Œ≤} (c_ne_top : c ‚â† ‚àû)
--     (tsum_le_c : ‚àë' i, a i ‚â§ c) {Œµ : Œ≤} (Œµ_ne_zero : Œµ ‚â† 0) :
--     ‚àÉ hf : { i : Œπ | Œµ ‚â§ a i }.Finite, ‚Üëhf.toFinset.card ‚â§ c / Œµ := by
--   have hf : { i : Œπ | Œµ ‚â§ a i }.Finite :=
--     finite_const_le_of_tsum_ne_top (ne_top_of_le_ne_top c_ne_top tsum_le_c) Œµ_ne_zero
--   refine ‚ü®hf, (ENNReal.le_div_iff_mul_le (.inl Œµ_ne_zero) (.inr c_ne_top)).2 ?_‚ü©
--   calc ‚Üëhf.toFinset.card * Œµ = ‚àë _i in hf.toFinset, Œµ := by rw [Finset.sum_const, nsmul_eq_mul]
--     _ ‚â§ ‚àë i in hf.toFinset, a i := Finset.sum_le_sum fun i ‚Ü¶ hf.mem_toFinset.1
--     _ ‚â§ ‚àë' i, a i := ENNReal.sum_le_tsum _
--     _ ‚â§ c := tsum_le_c

--  end tsum
 